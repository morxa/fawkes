$#include <interfaces/JoystickInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class JoystickInterface : public Interface
{
  static const unsigned int BUTTON_1;
  static const unsigned int BUTTON_2;
  static const unsigned int BUTTON_3;
  static const unsigned int BUTTON_4;
  static const unsigned int BUTTON_5;
  static const unsigned int BUTTON_6;
  static const unsigned int BUTTON_7;
  static const unsigned int BUTTON_8;
  static const unsigned int BUTTON_9;
  static const unsigned int BUTTON_10;
  static const unsigned int BUTTON_11;
  static const unsigned int BUTTON_12;
  static const unsigned int BUTTON_13;
  static const unsigned int BUTTON_14;
  static const unsigned int BUTTON_15;
  static const unsigned int BUTTON_16;
  static const unsigned int BUTTON_17;
  static const unsigned int BUTTON_18;
  static const unsigned int BUTTON_19;
  static const unsigned int BUTTON_20;
  static const unsigned int BUTTON_21;
  static const unsigned int BUTTON_22;
  static const unsigned int BUTTON_23;
  static const unsigned int BUTTON_24;
  static const unsigned int BUTTON_25;
  static const unsigned int BUTTON_26;
  static const unsigned int BUTTON_27;
  static const unsigned int BUTTON_28;
  static const unsigned int BUTTON_29;
  static const unsigned int BUTTON_30;
  static const unsigned int BUTTON_31;
  static const unsigned int BUTTON_32;
  static const unsigned char JFF_RUMBLE;
  static const unsigned char JFF_PERIODIC;
  static const unsigned char JFF_RAMP;
  static const unsigned char JFF_SPRING;
  static const unsigned char JFF_FRICTION;
  static const unsigned char JFF_DAMPER;
  static const unsigned char JFF_INERTIA;
  static const unsigned char JFF_CONSTANT;

  typedef enum {
    DIRECTION_DOWN = 0,
    DIRECTION_LEFT = 16384,
    DIRECTION_UP = 32768,
    DIRECTION_RIGHT = 49152
  } Direction;

  class StartRumbleMessage : public Message
  {
    StartRumbleMessage(unsigned short ini_length, unsigned short ini_delay, Direction ini_direction, unsigned short ini_strong_magnitude, unsigned short ini_weak_magnitude);
    StartRumbleMessage();
    ~StartRumbleMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned short length();
    void set_length(const unsigned short new_length);
    int maxlenof_length() const;
    unsigned short delay();
    void set_delay(const unsigned short new_delay);
    int maxlenof_delay() const;
    Direction direction();
    void set_direction(const Direction new_direction);
    int maxlenof_direction() const;
    unsigned short strong_magnitude();
    void set_strong_magnitude(const unsigned short new_strong_magnitude);
    int maxlenof_strong_magnitude() const;
    unsigned short weak_magnitude();
    void set_weak_magnitude(const unsigned short new_weak_magnitude);
    int maxlenof_weak_magnitude() const;
  };

  class StopRumbleMessage : public Message
  {
    StopRumbleMessage();
    ~StopRumbleMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  class StopAllMessage : public Message
  {
    StopAllMessage();
    ~StopAllMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  unsigned char num_axes();
  void set_num_axes(const unsigned char new_num_axes);
  int maxlenof_num_axes() const;
  unsigned char num_buttons();
  void set_num_buttons(const unsigned char new_num_buttons);
  int maxlenof_num_buttons() const;
  unsigned char supported_ff_effects();
  void set_supported_ff_effects(const unsigned char new_supported_ff_effects);
  int maxlenof_supported_ff_effects() const;
  unsigned int pressed_buttons();
  void set_pressed_buttons(const unsigned int new_pressed_buttons);
  int maxlenof_pressed_buttons() const;
  float axis(int index);
  void set_axis(unsigned int index, const float new_axis);
  int maxlenof_axis() const;
  unsigned char ff_effects();
  void set_ff_effects(const unsigned char new_ff_effects);
  int maxlenof_ff_effects() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.JoystickInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.JoystickInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.JoystickInterface.create_message = fawkes.Interface.create_message

$]

}
