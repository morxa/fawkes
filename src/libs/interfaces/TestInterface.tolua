$#include <interfaces/TestInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class TestInterface : public Interface
{
  static const int TEST_CONSTANT;
  static const float TEST_FLOAT_CONSTANT;

  typedef enum {
    TEST_ENUM_1,
    TEST_ENUM_2
  } TestEnum;

  class SetTestIntMessage : public Message
  {
    SetTestIntMessage(int ini_test_int);
    SetTestIntMessage();
    ~SetTestIntMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    int test_int();
    void set_test_int(const int new_test_int);
    int maxlenof_test_int() const;
  };

  class SetTestStringMessage : public Message
  {
    SetTestStringMessage(char * ini_test_string);
    SetTestStringMessage();
    ~SetTestStringMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * test_string();
    void set_test_string(const char * new_test_string);
    int maxlenof_test_string() const;
  };

  class CalculateMessage : public Message
  {
    CalculateMessage(int ini_summand, int ini_addend);
    CalculateMessage();
    ~CalculateMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    int summand();
    void set_summand(const int new_summand);
    int maxlenof_summand() const;
    int addend();
    void set_addend(const int new_addend);
    int maxlenof_addend() const;
  };

  bool is_test_bool();
  void set_test_bool(const bool new_test_bool);
  int maxlenof_test_bool() const;
  int test_int();
  void set_test_int(const int new_test_int);
  int maxlenof_test_int() const;
  unsigned char flags();
  void set_flags(const unsigned char new_flags);
  int maxlenof_flags() const;
  char * test_string();
  void set_test_string(const char * new_test_string);
  int maxlenof_test_string() const;
  int result();
  void set_result(const int new_result);
  int maxlenof_result() const;
  unsigned int test_uint();
  void set_test_uint(const unsigned int new_test_uint);
  int maxlenof_test_uint() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.TestInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.TestInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.TestInterface.create_message = fawkes.Interface.create_message

$]

}
