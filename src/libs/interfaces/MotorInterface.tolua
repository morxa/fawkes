$#include <interfaces/MotorInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class MotorInterface : public Interface
{
  static const unsigned int MOTOR_ENABLED;
  static const unsigned int MOTOR_DISABLED;
  static const unsigned int DRIVE_MODE_RPM;
  static const unsigned int DRIVE_MODE_TRANS;
  static const unsigned int DRIVE_MODE_ROT;
  static const unsigned int DRIVE_MODE_TRANS_ROT;
  static const unsigned int DRIVE_MODE_ORBIT;
  static const unsigned int DRIVE_MODE_LINE_TRANS_ROT;

  class SetMotorStateMessage : public Message
  {
    SetMotorStateMessage(unsigned int ini_motor_state);
    SetMotorStateMessage();
    ~SetMotorStateMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int motor_state();
    void set_motor_state(const unsigned int new_motor_state);
    int maxlenof_motor_state() const;
  };

  class AcquireControlMessage : public Message
  {
    AcquireControlMessage(unsigned int ini_controller, char * ini_controller_thread_name);
    AcquireControlMessage();
    ~AcquireControlMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int controller();
    void set_controller(const unsigned int new_controller);
    int maxlenof_controller() const;
    char * controller_thread_name();
    void set_controller_thread_name(const char * new_controller_thread_name);
    int maxlenof_controller_thread_name() const;
  };

  class ResetOdometryMessage : public Message
  {
    ResetOdometryMessage();
    ~ResetOdometryMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  class SetOdometryMessage : public Message
  {
    SetOdometryMessage(float ini_x, float ini_y, float ini_odometry_orientation);
    SetOdometryMessage();
    ~SetOdometryMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float x();
    void set_x(const float new_x);
    int maxlenof_x() const;
    float y();
    void set_y(const float new_y);
    int maxlenof_y() const;
    float odometry_orientation();
    void set_odometry_orientation(const float new_odometry_orientation);
    int maxlenof_odometry_orientation() const;
  };

  class DriveRPMMessage : public Message
  {
    DriveRPMMessage(float ini_front_right, float ini_front_left, float ini_rear);
    DriveRPMMessage();
    ~DriveRPMMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float front_right();
    void set_front_right(const float new_front_right);
    int maxlenof_front_right() const;
    float front_left();
    void set_front_left(const float new_front_left);
    int maxlenof_front_left() const;
    float rear();
    void set_rear(const float new_rear);
    int maxlenof_rear() const;
  };

  class GotoMessage : public Message
  {
    GotoMessage(float ini_x, float ini_y, float ini_phi, float ini_time_sec);
    GotoMessage();
    ~GotoMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float x();
    void set_x(const float new_x);
    int maxlenof_x() const;
    float y();
    void set_y(const float new_y);
    int maxlenof_y() const;
    float phi();
    void set_phi(const float new_phi);
    int maxlenof_phi() const;
    float time_sec();
    void set_time_sec(const float new_time_sec);
    int maxlenof_time_sec() const;
  };

  class TransMessage : public Message
  {
    TransMessage(float ini_vx, float ini_vy);
    TransMessage();
    ~TransMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float vx();
    void set_vx(const float new_vx);
    int maxlenof_vx() const;
    float vy();
    void set_vy(const float new_vy);
    int maxlenof_vy() const;
  };

  class RotMessage : public Message
  {
    RotMessage(float ini_omega);
    RotMessage();
    ~RotMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float omega();
    void set_omega(const float new_omega);
    int maxlenof_omega() const;
  };

  class TransRotMessage : public Message
  {
    TransRotMessage(float ini_vx, float ini_vy, float ini_omega);
    TransRotMessage();
    ~TransRotMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float vx();
    void set_vx(const float new_vx);
    int maxlenof_vx() const;
    float vy();
    void set_vy(const float new_vy);
    int maxlenof_vy() const;
    float omega();
    void set_omega(const float new_omega);
    int maxlenof_omega() const;
  };

  class OrbitMessage : public Message
  {
    OrbitMessage(float ini_px, float ini_py, float ini_omega);
    OrbitMessage();
    ~OrbitMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float px();
    void set_px(const float new_px);
    int maxlenof_px() const;
    float py();
    void set_py(const float new_py);
    int maxlenof_py() const;
    float omega();
    void set_omega(const float new_omega);
    int maxlenof_omega() const;
  };

  class LinTransRotMessage : public Message
  {
    LinTransRotMessage(float ini_vx, float ini_vy, float ini_omega);
    LinTransRotMessage();
    ~LinTransRotMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float vx();
    void set_vx(const float new_vx);
    int maxlenof_vx() const;
    float vy();
    void set_vy(const float new_vy);
    int maxlenof_vy() const;
    float omega();
    void set_omega(const float new_omega);
    int maxlenof_omega() const;
  };

  unsigned int motor_state();
  void set_motor_state(const unsigned int new_motor_state);
  int maxlenof_motor_state() const;
  unsigned int drive_mode();
  void set_drive_mode(const unsigned int new_drive_mode);
  int maxlenof_drive_mode() const;
  int right_rpm();
  void set_right_rpm(const int new_right_rpm);
  int maxlenof_right_rpm() const;
  int rear_rpm();
  void set_rear_rpm(const int new_rear_rpm);
  int maxlenof_rear_rpm() const;
  int left_rpm();
  void set_left_rpm(const int new_left_rpm);
  int maxlenof_left_rpm() const;
  float odometry_path_length();
  void set_odometry_path_length(const float new_odometry_path_length);
  int maxlenof_odometry_path_length() const;
  float odometry_position_x();
  void set_odometry_position_x(const float new_odometry_position_x);
  int maxlenof_odometry_position_x() const;
  float odometry_position_y();
  void set_odometry_position_y(const float new_odometry_position_y);
  int maxlenof_odometry_position_y() const;
  float odometry_orientation();
  void set_odometry_orientation(const float new_odometry_orientation);
  int maxlenof_odometry_orientation() const;
  float vx();
  void set_vx(const float new_vx);
  int maxlenof_vx() const;
  float vy();
  void set_vy(const float new_vy);
  int maxlenof_vy() const;
  float omega();
  void set_omega(const float new_omega);
  int maxlenof_omega() const;
  float des_vx();
  void set_des_vx(const float new_des_vx);
  int maxlenof_des_vx() const;
  float des_vy();
  void set_des_vy(const float new_des_vy);
  int maxlenof_des_vy() const;
  float des_omega();
  void set_des_omega(const float new_des_omega);
  int maxlenof_des_omega() const;
  unsigned int controller();
  void set_controller(const unsigned int new_controller);
  int maxlenof_controller() const;
  char * controller_thread_name();
  void set_controller_thread_name(const char * new_controller_thread_name);
  int maxlenof_controller_thread_name() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.MotorInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.MotorInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.MotorInterface.create_message = fawkes.Interface.create_message

$]

}
