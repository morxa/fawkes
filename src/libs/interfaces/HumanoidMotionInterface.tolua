$#include <interfaces/HumanoidMotionInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class HumanoidMotionInterface : public Interface
{

  typedef enum {
    LEG_LEFT,
    LEG_RIGHT
  } LegEnum;

  typedef enum {
    STANDUP_DETECT,
    STANDUP_BACK,
    STANDUP_FRONT
  } StandupEnum;

  class StopMessage : public Message
  {
    StopMessage();
    ~StopMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  class WalkStraightMessage : public Message
  {
    WalkStraightMessage(float ini_distance);
    WalkStraightMessage();
    ~WalkStraightMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float distance();
    void set_distance(const float new_distance);
    int maxlenof_distance() const;
  };

  class WalkSidewaysMessage : public Message
  {
    WalkSidewaysMessage(float ini_distance);
    WalkSidewaysMessage();
    ~WalkSidewaysMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float distance();
    void set_distance(const float new_distance);
    int maxlenof_distance() const;
  };

  class WalkArcMessage : public Message
  {
    WalkArcMessage(float ini_angle, float ini_radius);
    WalkArcMessage();
    ~WalkArcMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float angle();
    void set_angle(const float new_angle);
    int maxlenof_angle() const;
    float radius();
    void set_radius(const float new_radius);
    int maxlenof_radius() const;
  };

  class WalkVelocityMessage : public Message
  {
    WalkVelocityMessage(float ini_x, float ini_y, float ini_theta, float ini_speed);
    WalkVelocityMessage();
    ~WalkVelocityMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float x();
    void set_x(const float new_x);
    int maxlenof_x() const;
    float y();
    void set_y(const float new_y);
    int maxlenof_y() const;
    float theta();
    void set_theta(const float new_theta);
    int maxlenof_theta() const;
    float speed();
    void set_speed(const float new_speed);
    int maxlenof_speed() const;
  };

  class TurnMessage : public Message
  {
    TurnMessage(float ini_angle);
    TurnMessage();
    ~TurnMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float angle();
    void set_angle(const float new_angle);
    int maxlenof_angle() const;
  };

  class KickMessage : public Message
  {
    KickMessage(LegEnum ini_leg, float ini_strength);
    KickMessage();
    ~KickMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    LegEnum leg();
    void set_leg(const LegEnum new_leg);
    int maxlenof_leg() const;
    float strength();
    void set_strength(const float new_strength);
    int maxlenof_strength() const;
  };

  class ParkMessage : public Message
  {
    ParkMessage();
    ~ParkMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  class GetUpMessage : public Message
  {
    GetUpMessage();
    ~GetUpMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  class StandupMessage : public Message
  {
    StandupMessage(StandupEnum ini_from_pos);
    StandupMessage();
    ~StandupMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    StandupEnum from_pos();
    void set_from_pos(const StandupEnum new_from_pos);
    int maxlenof_from_pos() const;
  };

  class MoveHeadMessage : public Message
  {
    MoveHeadMessage(float ini_yaw, float ini_pitch, float ini_speed);
    MoveHeadMessage();
    ~MoveHeadMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float yaw();
    void set_yaw(const float new_yaw);
    int maxlenof_yaw() const;
    float pitch();
    void set_pitch(const float new_pitch);
    int maxlenof_pitch() const;
    float speed();
    void set_speed(const float new_speed);
    int maxlenof_speed() const;
  };

  bool is_moving();
  void set_moving(const bool new_moving);
  int maxlenof_moving() const;
  bool is_arms_enabled();
  void set_arms_enabled(const bool new_arms_enabled);
  int maxlenof_arms_enabled() const;
  unsigned int msgid();
  void set_msgid(const unsigned int new_msgid);
  int maxlenof_msgid() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.HumanoidMotionInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.HumanoidMotionInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.HumanoidMotionInterface.create_message = fawkes.Interface.create_message

$]

}
