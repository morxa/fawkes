$#include <interfaces/NavPathInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class NavPathInterface : public Interface
{

  char * path_node_1();
  void set_path_node_1(const char * new_path_node_1);
  int maxlenof_path_node_1() const;
  char * path_node_2();
  void set_path_node_2(const char * new_path_node_2);
  int maxlenof_path_node_2() const;
  char * path_node_3();
  void set_path_node_3(const char * new_path_node_3);
  int maxlenof_path_node_3() const;
  char * path_node_4();
  void set_path_node_4(const char * new_path_node_4);
  int maxlenof_path_node_4() const;
  char * path_node_5();
  void set_path_node_5(const char * new_path_node_5);
  int maxlenof_path_node_5() const;
  char * path_node_6();
  void set_path_node_6(const char * new_path_node_6);
  int maxlenof_path_node_6() const;
  char * path_node_7();
  void set_path_node_7(const char * new_path_node_7);
  int maxlenof_path_node_7() const;
  char * path_node_8();
  void set_path_node_8(const char * new_path_node_8);
  int maxlenof_path_node_8() const;
  char * path_node_9();
  void set_path_node_9(const char * new_path_node_9);
  int maxlenof_path_node_9() const;
  char * path_node_10();
  void set_path_node_10(const char * new_path_node_10);
  int maxlenof_path_node_10() const;
  char * path_node_11();
  void set_path_node_11(const char * new_path_node_11);
  int maxlenof_path_node_11() const;
  char * path_node_12();
  void set_path_node_12(const char * new_path_node_12);
  int maxlenof_path_node_12() const;
  char * path_node_13();
  void set_path_node_13(const char * new_path_node_13);
  int maxlenof_path_node_13() const;
  char * path_node_14();
  void set_path_node_14(const char * new_path_node_14);
  int maxlenof_path_node_14() const;
  char * path_node_15();
  void set_path_node_15(const char * new_path_node_15);
  int maxlenof_path_node_15() const;
  char * path_node_16();
  void set_path_node_16(const char * new_path_node_16);
  int maxlenof_path_node_16() const;
  char * path_node_17();
  void set_path_node_17(const char * new_path_node_17);
  int maxlenof_path_node_17() const;
  char * path_node_18();
  void set_path_node_18(const char * new_path_node_18);
  int maxlenof_path_node_18() const;
  char * path_node_19();
  void set_path_node_19(const char * new_path_node_19);
  int maxlenof_path_node_19() const;
  char * path_node_20();
  void set_path_node_20(const char * new_path_node_20);
  int maxlenof_path_node_20() const;
  char * path_node_21();
  void set_path_node_21(const char * new_path_node_21);
  int maxlenof_path_node_21() const;
  char * path_node_22();
  void set_path_node_22(const char * new_path_node_22);
  int maxlenof_path_node_22() const;
  char * path_node_23();
  void set_path_node_23(const char * new_path_node_23);
  int maxlenof_path_node_23() const;
  char * path_node_24();
  void set_path_node_24(const char * new_path_node_24);
  int maxlenof_path_node_24() const;
  char * path_node_25();
  void set_path_node_25(const char * new_path_node_25);
  int maxlenof_path_node_25() const;
  char * path_node_26();
  void set_path_node_26(const char * new_path_node_26);
  int maxlenof_path_node_26() const;
  char * path_node_27();
  void set_path_node_27(const char * new_path_node_27);
  int maxlenof_path_node_27() const;
  char * path_node_28();
  void set_path_node_28(const char * new_path_node_28);
  int maxlenof_path_node_28() const;
  char * path_node_29();
  void set_path_node_29(const char * new_path_node_29);
  int maxlenof_path_node_29() const;
  char * path_node_30();
  void set_path_node_30(const char * new_path_node_30);
  int maxlenof_path_node_30() const;
  char * path_node_31();
  void set_path_node_31(const char * new_path_node_31);
  int maxlenof_path_node_31() const;
  char * path_node_32();
  void set_path_node_32(const char * new_path_node_32);
  int maxlenof_path_node_32() const;
  char * path_node_33();
  void set_path_node_33(const char * new_path_node_33);
  int maxlenof_path_node_33() const;
  char * path_node_34();
  void set_path_node_34(const char * new_path_node_34);
  int maxlenof_path_node_34() const;
  char * path_node_35();
  void set_path_node_35(const char * new_path_node_35);
  int maxlenof_path_node_35() const;
  char * path_node_36();
  void set_path_node_36(const char * new_path_node_36);
  int maxlenof_path_node_36() const;
  char * path_node_37();
  void set_path_node_37(const char * new_path_node_37);
  int maxlenof_path_node_37() const;
  char * path_node_38();
  void set_path_node_38(const char * new_path_node_38);
  int maxlenof_path_node_38() const;
  char * path_node_39();
  void set_path_node_39(const char * new_path_node_39);
  int maxlenof_path_node_39() const;
  char * path_node_40();
  void set_path_node_40(const char * new_path_node_40);
  int maxlenof_path_node_40() const;
  unsigned int path_length();
  void set_path_length(const unsigned int new_path_length);
  int maxlenof_path_length() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.NavPathInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.NavPathInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.NavPathInterface.create_message = fawkes.Interface.create_message

$]

}
