$#include <interfaces/KickerInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class KickerInterface : public Interface
{

  typedef enum {
    GUIDE_BALL_LEFT,
    GUIDE_BALL_RIGHT
  } GuideBallSideEnum;

  class KickMessage : public Message
  {
    KickMessage(bool ini_left, bool ini_center, bool ini_right, unsigned int ini_intensity);
    KickMessage();
    ~KickMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    bool is_left();
    void set_left(const bool new_left);
    int maxlenof_left() const;
    bool is_center();
    void set_center(const bool new_center);
    int maxlenof_center() const;
    bool is_right();
    void set_right(const bool new_right);
    int maxlenof_right() const;
    unsigned int intensity();
    void set_intensity(const unsigned int new_intensity);
    int maxlenof_intensity() const;
  };

  class ResetCounterMessage : public Message
  {
    ResetCounterMessage();
    ~ResetCounterMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  class GuideBallMessage : public Message
  {
    GuideBallMessage(GuideBallSideEnum ini_guide_ball_side);
    GuideBallMessage();
    ~GuideBallMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    GuideBallSideEnum guide_ball_side();
    void set_guide_ball_side(const GuideBallSideEnum new_guide_ball_side);
    int maxlenof_guide_ball_side() const;
  };

  int num_kicks_left();
  void set_num_kicks_left(const int new_num_kicks_left);
  int maxlenof_num_kicks_left() const;
  int num_kicks_center();
  void set_num_kicks_center(const int new_num_kicks_center);
  int maxlenof_num_kicks_center() const;
  int num_kicks_right();
  void set_num_kicks_right(const int new_num_kicks_right);
  int maxlenof_num_kicks_right() const;
  GuideBallSideEnum guide_ball_side();
  void set_guide_ball_side(const GuideBallSideEnum new_guide_ball_side);
  int maxlenof_guide_ball_side() const;
  unsigned int current_intensity();
  void set_current_intensity(const unsigned int new_current_intensity);
  int maxlenof_current_intensity() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.KickerInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.KickerInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.KickerInterface.create_message = fawkes.Interface.create_message

$]

}
