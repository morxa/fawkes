$#include <interfaces/CameraControlInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class CameraControlInterface : public Interface
{

  typedef enum {
    EFF_NONE,
    EFF_PASTEL,
    EFF_NEGATIVE,
    EFF_BW,
    EFF_SOLARIZE
  } Effect;

  class SetEffectMessage : public Message
  {
    SetEffectMessage(Effect ini_effect);
    SetEffectMessage();
    ~SetEffectMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    Effect effect();
    void set_effect(const Effect new_effect);
    int maxlenof_effect() const;
  };

  class SetZoomMessage : public Message
  {
    SetZoomMessage(unsigned int ini_zoom);
    SetZoomMessage();
    ~SetZoomMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int zoom();
    void set_zoom(const unsigned int new_zoom);
    int maxlenof_zoom() const;
  };

  class SetMirrorMessage : public Message
  {
    SetMirrorMessage(bool ini_mirror);
    SetMirrorMessage();
    ~SetMirrorMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    bool is_mirror();
    void set_mirror(const bool new_mirror);
    int maxlenof_mirror() const;
  };

  Effect effect();
  void set_effect(const Effect new_effect);
  int maxlenof_effect() const;
  bool is_effect_supported();
  void set_effect_supported(const bool new_effect_supported);
  int maxlenof_effect_supported() const;
  unsigned int zoom();
  void set_zoom(const unsigned int new_zoom);
  int maxlenof_zoom() const;
  bool is_zoom_supported();
  void set_zoom_supported(const bool new_zoom_supported);
  int maxlenof_zoom_supported() const;
  unsigned int zoom_max();
  void set_zoom_max(const unsigned int new_zoom_max);
  int maxlenof_zoom_max() const;
  unsigned int zoom_min();
  void set_zoom_min(const unsigned int new_zoom_min);
  int maxlenof_zoom_min() const;
  bool is_mirror();
  void set_mirror(const bool new_mirror);
  int maxlenof_mirror() const;
  bool is_mirror_supported();
  void set_mirror_supported(const bool new_mirror_supported);
  int maxlenof_mirror_supported() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.CameraControlInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.CameraControlInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.CameraControlInterface.create_message = fawkes.Interface.create_message

$]

}
