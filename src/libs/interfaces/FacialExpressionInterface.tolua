$#include <interfaces/FacialExpressionInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class FacialExpressionInterface : public Interface
{

  typedef enum {
    BROWS_DEFAULT,
    BROWS_FROWN,
    BROWS_LIFT
  } brows_t;

  typedef enum {
    EYES_DEFAULT,
    EYES_UP,
    EYES_DOWN,
    EYES_LEFT,
    EYES_RIGHT,
    EYES_COOL,
    EYES_CROSS,
    EYES_HEART,
    EYES_DOLLAR
  } eyes_t;

  typedef enum {
    JOWL_DEFAULT,
    JOWL_BLUSH,
    JOWL_TEARS
  } jowl_t;

  typedef enum {
    MOUTH_DEFAULT,
    MOUTH_OPEN,
    MOUTH_CLOSE,
    MOUTH_SMILE,
    MOUTH_SCOWL
  } mouth_t;

  class MoveBrowsMessage : public Message
  {
    MoveBrowsMessage(brows_t ini_brows_action);
    MoveBrowsMessage();
    ~MoveBrowsMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    brows_t brows_action();
    void set_brows_action(const brows_t new_brows_action);
    int maxlenof_brows_action() const;
  };

  class MoveEyesMessage : public Message
  {
    MoveEyesMessage(eyes_t ini_eyes_action);
    MoveEyesMessage();
    ~MoveEyesMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    eyes_t eyes_action();
    void set_eyes_action(const eyes_t new_eyes_action);
    int maxlenof_eyes_action() const;
  };

  class MoveJowlMessage : public Message
  {
    MoveJowlMessage(jowl_t ini_jowl_action);
    MoveJowlMessage();
    ~MoveJowlMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    jowl_t jowl_action();
    void set_jowl_action(const jowl_t new_jowl_action);
    int maxlenof_jowl_action() const;
  };

  class MoveMouthMessage : public Message
  {
    MoveMouthMessage(mouth_t ini_mouth_action);
    MoveMouthMessage();
    ~MoveMouthMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    mouth_t mouth_action();
    void set_mouth_action(const mouth_t new_mouth_action);
    int maxlenof_mouth_action() const;
  };

  brows_t brows_action();
  void set_brows_action(const brows_t new_brows_action);
  int maxlenof_brows_action() const;
  eyes_t eyes_action();
  void set_eyes_action(const eyes_t new_eyes_action);
  int maxlenof_eyes_action() const;
  jowl_t jowl_action();
  void set_jowl_action(const jowl_t new_jowl_action);
  int maxlenof_jowl_action() const;
  mouth_t mouth_action();
  void set_mouth_action(const mouth_t new_mouth_action);
  int maxlenof_mouth_action() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.FacialExpressionInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.FacialExpressionInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.FacialExpressionInterface.create_message = fawkes.Interface.create_message

$]

}
