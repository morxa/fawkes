$#include <interfaces/FacerInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class FacerInterface : public Interface
{

  typedef enum {
    OPMODE_DISABLED,
    OPMODE_DETECTION,
    OPMODE_RECOGNITION,
    OPMODE_LEARNING,
    OPMODE_GENDER
  } if_facer_opmode_t;

  class LearnFaceMessage : public Message
  {
    LearnFaceMessage(char * ini_name);
    LearnFaceMessage();
    ~LearnFaceMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * name();
    void set_name(const char * new_name);
    int maxlenof_name() const;
  };

  class SetOpmodeMessage : public Message
  {
    SetOpmodeMessage(if_facer_opmode_t ini_opmode);
    SetOpmodeMessage();
    ~SetOpmodeMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    if_facer_opmode_t opmode();
    void set_opmode(const if_facer_opmode_t new_opmode);
    int maxlenof_opmode() const;
  };

  class EnableIdentityMessage : public Message
  {
    EnableIdentityMessage(unsigned int ini_index, bool ini_enable);
    EnableIdentityMessage();
    ~EnableIdentityMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int index();
    void set_index(const unsigned int new_index);
    int maxlenof_index() const;
    bool is_enable();
    void set_enable(const bool new_enable);
    int maxlenof_enable() const;
  };

  class SetNameMessage : public Message
  {
    SetNameMessage(unsigned int ini_index, char * ini_name);
    SetNameMessage();
    ~SetNameMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int index();
    void set_index(const unsigned int new_index);
    int maxlenof_index() const;
    char * name();
    void set_name(const char * new_name);
    int maxlenof_name() const;
  };

  class GetNameMessage : public Message
  {
    GetNameMessage(unsigned int ini_index);
    GetNameMessage();
    ~GetNameMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int index();
    void set_index(const unsigned int new_index);
    int maxlenof_index() const;
  };

  class StartSearchPersonMessage : public Message
  {
    StartSearchPersonMessage(unsigned int ini_index);
    StartSearchPersonMessage();
    ~StartSearchPersonMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int index();
    void set_index(const unsigned int new_index);
    int maxlenof_index() const;
  };

  class StopSearchPersonMessage : public Message
  {
    StopSearchPersonMessage();
    ~StopSearchPersonMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  if_facer_opmode_t opmode();
  void set_opmode(const if_facer_opmode_t new_opmode);
  int maxlenof_opmode() const;
  unsigned int num_identities();
  void set_num_identities(const unsigned int new_num_identities);
  int maxlenof_num_identities() const;
  unsigned int recognized_identity();
  void set_recognized_identity(const unsigned int new_recognized_identity);
  int maxlenof_recognized_identity() const;
  char * recognized_name();
  void set_recognized_name(const char * new_recognized_name);
  int maxlenof_recognized_name() const;
  unsigned int num_detections();
  void set_num_detections(const unsigned int new_num_detections);
  int maxlenof_num_detections() const;
  unsigned int num_recognitions();
  void set_num_recognitions(const unsigned int new_num_recognitions);
  int maxlenof_num_recognitions() const;
  unsigned int most_likely_identity();
  void set_most_likely_identity(const unsigned int new_most_likely_identity);
  int maxlenof_most_likely_identity() const;
  char * most_likely_gender();
  void set_most_likely_gender(const char * new_most_likely_gender);
  int maxlenof_most_likely_gender() const;
  float history_ratio();
  void set_history_ratio(const float new_history_ratio);
  int maxlenof_history_ratio() const;
  float sec_since_detection();
  void set_sec_since_detection(const float new_sec_since_detection);
  int maxlenof_sec_since_detection() const;
  int visibility_history();
  void set_visibility_history(const int new_visibility_history);
  int maxlenof_visibility_history() const;
  bool is_learning_in_progress();
  void set_learning_in_progress(const bool new_learning_in_progress);
  int maxlenof_learning_in_progress() const;
  bool is_searching_person();
  void set_searching_person(const bool new_searching_person);
  int maxlenof_searching_person() const;
  float recording_progress();
  void set_recording_progress(const float new_recording_progress);
  int maxlenof_recording_progress() const;
  float bearing();
  void set_bearing(const float new_bearing);
  int maxlenof_bearing() const;
  float slope();
  void set_slope(const float new_slope);
  int maxlenof_slope() const;
  unsigned int requested_index();
  void set_requested_index(const unsigned int new_requested_index);
  int maxlenof_requested_index() const;
  char * requested_name();
  void set_requested_name(const char * new_requested_name);
  int maxlenof_requested_name() const;
  unsigned int index_last_learned();
  void set_index_last_learned(const unsigned int new_index_last_learned);
  int maxlenof_index_last_learned() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.FacerInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.FacerInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.FacerInterface.create_message = fawkes.Interface.create_message

$]

}
