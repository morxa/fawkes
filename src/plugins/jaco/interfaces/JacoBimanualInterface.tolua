$#include <interfaces/JacoBimanualInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class JacoBimanualInterface : public Interface
{
  static const unsigned int ERROR_NONE;
  static const unsigned int ERROR_UNSPECIFIC;
  static const unsigned int ERROR_NO_IK;
  static const unsigned int ERROR_PLANNING;

  class CartesianGotoMessage : public Message
  {
    CartesianGotoMessage(float ini_l_x, float ini_l_y, float ini_l_z, float ini_l_e1, float ini_l_e2, float ini_l_e3, float ini_r_x, float ini_r_y, float ini_r_z, float ini_r_e1, float ini_r_e2, float ini_r_e3);
    CartesianGotoMessage();
    ~CartesianGotoMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float l_x();
    void set_l_x(const float new_l_x);
    int maxlenof_l_x() const;
    float l_y();
    void set_l_y(const float new_l_y);
    int maxlenof_l_y() const;
    float l_z();
    void set_l_z(const float new_l_z);
    int maxlenof_l_z() const;
    float l_e1();
    void set_l_e1(const float new_l_e1);
    int maxlenof_l_e1() const;
    float l_e2();
    void set_l_e2(const float new_l_e2);
    int maxlenof_l_e2() const;
    float l_e3();
    void set_l_e3(const float new_l_e3);
    int maxlenof_l_e3() const;
    float r_x();
    void set_r_x(const float new_r_x);
    int maxlenof_r_x() const;
    float r_y();
    void set_r_y(const float new_r_y);
    int maxlenof_r_y() const;
    float r_z();
    void set_r_z(const float new_r_z);
    int maxlenof_r_z() const;
    float r_e1();
    void set_r_e1(const float new_r_e1);
    int maxlenof_r_e1() const;
    float r_e2();
    void set_r_e2(const float new_r_e2);
    int maxlenof_r_e2() const;
    float r_e3();
    void set_r_e3(const float new_r_e3);
    int maxlenof_r_e3() const;
  };

  class MoveGripperMessage : public Message
  {
    MoveGripperMessage(float ini_l_finger1, float ini_l_finger2, float ini_l_finger3, float ini_r_finger1, float ini_r_finger2, float ini_r_finger3);
    MoveGripperMessage();
    ~MoveGripperMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float l_finger1();
    void set_l_finger1(const float new_l_finger1);
    int maxlenof_l_finger1() const;
    float l_finger2();
    void set_l_finger2(const float new_l_finger2);
    int maxlenof_l_finger2() const;
    float l_finger3();
    void set_l_finger3(const float new_l_finger3);
    int maxlenof_l_finger3() const;
    float r_finger1();
    void set_r_finger1(const float new_r_finger1);
    int maxlenof_r_finger1() const;
    float r_finger2();
    void set_r_finger2(const float new_r_finger2);
    int maxlenof_r_finger2() const;
    float r_finger3();
    void set_r_finger3(const float new_r_finger3);
    int maxlenof_r_finger3() const;
  };

  class SetPlannerParamsMessage : public Message
  {
    SetPlannerParamsMessage(char * ini_params);
    SetPlannerParamsMessage();
    ~SetPlannerParamsMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * params();
    void set_params(const char * new_params);
    int maxlenof_params() const;
  };

  class SetConstrainedMessage : public Message
  {
    SetConstrainedMessage(bool ini_constrained);
    SetConstrainedMessage();
    ~SetConstrainedMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    bool is_constrained();
    void set_constrained(const bool new_constrained);
    int maxlenof_constrained() const;
  };

  unsigned int msgid();
  void set_msgid(const unsigned int new_msgid);
  int maxlenof_msgid() const;
  bool is_final();
  void set_final(const bool new_final);
  int maxlenof_final() const;
  unsigned int error_code();
  void set_error_code(const unsigned int new_error_code);
  int maxlenof_error_code() const;
  bool is_constrained();
  void set_constrained(const bool new_constrained);
  int maxlenof_constrained() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.JacoBimanualInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.JacoBimanualInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.JacoBimanualInterface.create_message = fawkes.Interface.create_message

$]

}
