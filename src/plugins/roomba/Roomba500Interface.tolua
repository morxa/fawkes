$#include <interfaces/Roomba500Interface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class Roomba500Interface : public Interface
{

  typedef enum {
    MODE_OFF = 0,
    MODE_PASSIVE = 1,
    MODE_SAFE = 2,
    MODE_FULL = 3
  } Mode;

  typedef enum {
    IR_NONE = 0,
    IR_REMOTE_LEFT = 129,
    IR_REMOTE_FORWARD = 130,
    IR_REMOTE_RIGHT = 131,
    IR_REMOTE_SPOT = 132,
    IR_REMOTE_MAX = 133,
    IR_REMOTE_SMALL = 134,
    IR_REMOTE_MEDIUM = 135,
    IR_REMOTE_LARGE_CLEAN = 136,
    IR_REMOTE_STOP = 137,
    IR_REMOTE_POWER = 138,
    IR_REMOTE_ARC_LEFT = 139,
    IR_REMOTE_ARC_RIGHT = 140,
    IR_REMOTE_STOP2 = 141,
    IR_SCHED_REMOTE_DOWNLOAD = 142,
    IR_SCHED_REMOTE_SEEK_DOCK = 143,
    IR_DISC_DOCK_RESERVED = 240,
    IR_DISC_DOCK_RED_BUOY = 248,
    IR_DISC_DOCK_GREEN_BUOY = 244,
    IR_DISC_DOCK_FORCE_FIELD = 242,
    IR_DISC_DOCK_RED_GREEN_BUOY = 252,
    IR_DISC_DOCK_RED_BUOY_FORCE_FIELD = 250,
    IR_DISC_DOCK_GREEN_BUOY_FORCE_FIELD = 246,
    IR_DISC_DOCK_RED_GREEN_BUOY_FORCE_FIELD = 254,
    IR_DOCK_RESERVED = 160,
    IR_DOCK_RED_BUOY = 168,
    IR_DOCK_GREEN_BUOY = 164,
    IR_DOCK_FORCE_FIELD = 161,
    IR_DOCK_RED_GREEN_BUOY = 172,
    IR_DOCK_RED_BUOY_FORCE_FIELD = 169,
    IR_DOCK_GREEN_BUOY_FORCE_FIELD = 165,
    IR_DOCK_RED_GREEN_BUOY_FORCE_FIELD = 173,
    IR_VIRTUAL_WALL = 162
  } InfraredCharacter;

  typedef enum {
    CHARGING_NO = 0,
    CHARGING_RECONDITIONING = 1,
    CHARGING_FULL = 2,
    CHARGING_TRICKLE = 3,
    CHARGING_WAITING = 4,
    CHARGING_ERROR = 5
  } ChargingState;

  typedef enum {
    BRUSHSTATE_OFF,
    BRUSHSTATE_FORWARD,
    BRUSHSTATE_BACKWARD
  } BrushState;

  class StopMessage : public Message
  {
    StopMessage();
    ~StopMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  class DockMessage : public Message
  {
    DockMessage();
    ~DockMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  class SetModeMessage : public Message
  {
    SetModeMessage(Mode ini_mode);
    SetModeMessage();
    ~SetModeMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    Mode mode();
    void set_mode(const Mode new_mode);
    int maxlenof_mode() const;
  };

  class DriveStraightMessage : public Message
  {
    DriveStraightMessage(short ini_velocity);
    DriveStraightMessage();
    ~DriveStraightMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    short velocity();
    void set_velocity(const short new_velocity);
    int maxlenof_velocity() const;
  };

  class DriveMessage : public Message
  {
    DriveMessage(short ini_velocity, short ini_radius);
    DriveMessage();
    ~DriveMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    short velocity();
    void set_velocity(const short new_velocity);
    int maxlenof_velocity() const;
    short radius();
    void set_radius(const short new_radius);
    int maxlenof_radius() const;
  };

  class SetMotorsMessage : public Message
  {
    SetMotorsMessage(bool ini_vacuuming, BrushState ini_main, BrushState ini_side);
    SetMotorsMessage();
    ~SetMotorsMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    bool is_vacuuming();
    void set_vacuuming(const bool new_vacuuming);
    int maxlenof_vacuuming() const;
    BrushState main();
    void set_main(const BrushState new_main);
    int maxlenof_main() const;
    BrushState side();
    void set_side(const BrushState new_side);
    int maxlenof_side() const;
  };

  Mode mode();
  void set_mode(const Mode new_mode);
  int maxlenof_mode() const;
  bool is_wheel_drop_left();
  void set_wheel_drop_left(const bool new_wheel_drop_left);
  int maxlenof_wheel_drop_left() const;
  bool is_wheel_drop_right();
  void set_wheel_drop_right(const bool new_wheel_drop_right);
  int maxlenof_wheel_drop_right() const;
  bool is_bump_left();
  void set_bump_left(const bool new_bump_left);
  int maxlenof_bump_left() const;
  bool is_bump_right();
  void set_bump_right(const bool new_bump_right);
  int maxlenof_bump_right() const;
  bool is_wall();
  void set_wall(const bool new_wall);
  int maxlenof_wall() const;
  bool is_cliff_left();
  void set_cliff_left(const bool new_cliff_left);
  int maxlenof_cliff_left() const;
  bool is_cliff_front_left();
  void set_cliff_front_left(const bool new_cliff_front_left);
  int maxlenof_cliff_front_left() const;
  bool is_cliff_front_right();
  void set_cliff_front_right(const bool new_cliff_front_right);
  int maxlenof_cliff_front_right() const;
  bool is_cliff_right();
  void set_cliff_right(const bool new_cliff_right);
  int maxlenof_cliff_right() const;
  bool is_virtual_wall();
  void set_virtual_wall(const bool new_virtual_wall);
  int maxlenof_virtual_wall() const;
  bool is_overcurrent_side_brush();
  void set_overcurrent_side_brush(const bool new_overcurrent_side_brush);
  int maxlenof_overcurrent_side_brush() const;
  bool is_overcurrent_main_brush();
  void set_overcurrent_main_brush(const bool new_overcurrent_main_brush);
  int maxlenof_overcurrent_main_brush() const;
  bool is_overcurrent_left_wheel();
  void set_overcurrent_left_wheel(const bool new_overcurrent_left_wheel);
  int maxlenof_overcurrent_left_wheel() const;
  bool is_overcurrent_right_wheel();
  void set_overcurrent_right_wheel(const bool new_overcurrent_right_wheel);
  int maxlenof_overcurrent_right_wheel() const;
  bool is_dirt_detect();
  void set_dirt_detect(const bool new_dirt_detect);
  int maxlenof_dirt_detect() const;
  InfraredCharacter ir_opcode_omni();
  void set_ir_opcode_omni(const InfraredCharacter new_ir_opcode_omni);
  int maxlenof_ir_opcode_omni() const;
  bool is_button_clean();
  void set_button_clean(const bool new_button_clean);
  int maxlenof_button_clean() const;
  bool is_button_spot();
  void set_button_spot(const bool new_button_spot);
  int maxlenof_button_spot() const;
  bool is_button_dock();
  void set_button_dock(const bool new_button_dock);
  int maxlenof_button_dock() const;
  bool is_button_minute();
  void set_button_minute(const bool new_button_minute);
  int maxlenof_button_minute() const;
  bool is_button_hour();
  void set_button_hour(const bool new_button_hour);
  int maxlenof_button_hour() const;
  bool is_button_day();
  void set_button_day(const bool new_button_day);
  int maxlenof_button_day() const;
  bool is_button_schedule();
  void set_button_schedule(const bool new_button_schedule);
  int maxlenof_button_schedule() const;
  bool is_button_clock();
  void set_button_clock(const bool new_button_clock);
  int maxlenof_button_clock() const;
  short distance();
  void set_distance(const short new_distance);
  int maxlenof_distance() const;
  short angle();
  void set_angle(const short new_angle);
  int maxlenof_angle() const;
  ChargingState charging_state();
  void set_charging_state(const ChargingState new_charging_state);
  int maxlenof_charging_state() const;
  unsigned short voltage();
  void set_voltage(const unsigned short new_voltage);
  int maxlenof_voltage() const;
  short current();
  void set_current(const short new_current);
  int maxlenof_current() const;
  char temperature();
  void set_temperature(const char new_temperature);
  int maxlenof_temperature() const;
  unsigned short battery_charge();
  void set_battery_charge(const unsigned short new_battery_charge);
  int maxlenof_battery_charge() const;
  unsigned short battery_capacity();
  void set_battery_capacity(const unsigned short new_battery_capacity);
  int maxlenof_battery_capacity() const;
  unsigned short wall_signal();
  void set_wall_signal(const unsigned short new_wall_signal);
  int maxlenof_wall_signal() const;
  unsigned short cliff_left_signal();
  void set_cliff_left_signal(const unsigned short new_cliff_left_signal);
  int maxlenof_cliff_left_signal() const;
  unsigned short cliff_front_left_signal();
  void set_cliff_front_left_signal(const unsigned short new_cliff_front_left_signal);
  int maxlenof_cliff_front_left_signal() const;
  unsigned short cliff_front_right_signal();
  void set_cliff_front_right_signal(const unsigned short new_cliff_front_right_signal);
  int maxlenof_cliff_front_right_signal() const;
  unsigned short cliff_right_signal();
  void set_cliff_right_signal(const unsigned short new_cliff_right_signal);
  int maxlenof_cliff_right_signal() const;
  bool is_home_base_charger_available();
  void set_home_base_charger_available(const bool new_home_base_charger_available);
  int maxlenof_home_base_charger_available() const;
  bool is_internal_charger_available();
  void set_internal_charger_available(const bool new_internal_charger_available);
  int maxlenof_internal_charger_available() const;
  unsigned char song_number();
  void set_song_number(const unsigned char new_song_number);
  int maxlenof_song_number() const;
  bool is_song_playing();
  void set_song_playing(const bool new_song_playing);
  int maxlenof_song_playing() const;
  short velocity();
  void set_velocity(const short new_velocity);
  int maxlenof_velocity() const;
  short radius();
  void set_radius(const short new_radius);
  int maxlenof_radius() const;
  short velocity_right();
  void set_velocity_right(const short new_velocity_right);
  int maxlenof_velocity_right() const;
  short velocity_left();
  void set_velocity_left(const short new_velocity_left);
  int maxlenof_velocity_left() const;
  unsigned short encoder_counts_left();
  void set_encoder_counts_left(const unsigned short new_encoder_counts_left);
  int maxlenof_encoder_counts_left() const;
  unsigned short encoder_counts_right();
  void set_encoder_counts_right(const unsigned short new_encoder_counts_right);
  int maxlenof_encoder_counts_right() const;
  bool is_bumper_left();
  void set_bumper_left(const bool new_bumper_left);
  int maxlenof_bumper_left() const;
  bool is_bumper_front_left();
  void set_bumper_front_left(const bool new_bumper_front_left);
  int maxlenof_bumper_front_left() const;
  bool is_bumper_center_left();
  void set_bumper_center_left(const bool new_bumper_center_left);
  int maxlenof_bumper_center_left() const;
  bool is_bumper_center_right();
  void set_bumper_center_right(const bool new_bumper_center_right);
  int maxlenof_bumper_center_right() const;
  bool is_bumper_front_right();
  void set_bumper_front_right(const bool new_bumper_front_right);
  int maxlenof_bumper_front_right() const;
  bool is_bumper_right();
  void set_bumper_right(const bool new_bumper_right);
  int maxlenof_bumper_right() const;
  unsigned short light_bump_left();
  void set_light_bump_left(const unsigned short new_light_bump_left);
  int maxlenof_light_bump_left() const;
  unsigned short light_bump_front_left();
  void set_light_bump_front_left(const unsigned short new_light_bump_front_left);
  int maxlenof_light_bump_front_left() const;
  unsigned short light_bump_center_left();
  void set_light_bump_center_left(const unsigned short new_light_bump_center_left);
  int maxlenof_light_bump_center_left() const;
  unsigned short light_bump_center_right();
  void set_light_bump_center_right(const unsigned short new_light_bump_center_right);
  int maxlenof_light_bump_center_right() const;
  unsigned short light_bump_front_right();
  void set_light_bump_front_right(const unsigned short new_light_bump_front_right);
  int maxlenof_light_bump_front_right() const;
  unsigned short light_bump_right();
  void set_light_bump_right(const unsigned short new_light_bump_right);
  int maxlenof_light_bump_right() const;
  InfraredCharacter ir_opcode_left();
  void set_ir_opcode_left(const InfraredCharacter new_ir_opcode_left);
  int maxlenof_ir_opcode_left() const;
  InfraredCharacter ir_opcode_right();
  void set_ir_opcode_right(const InfraredCharacter new_ir_opcode_right);
  int maxlenof_ir_opcode_right() const;
  short left_motor_current();
  void set_left_motor_current(const short new_left_motor_current);
  int maxlenof_left_motor_current() const;
  short right_motor_current();
  void set_right_motor_current(const short new_right_motor_current);
  int maxlenof_right_motor_current() const;
  short main_brush_current();
  void set_main_brush_current(const short new_main_brush_current);
  int maxlenof_main_brush_current() const;
  short side_brush_current();
  void set_side_brush_current(const short new_side_brush_current);
  int maxlenof_side_brush_current() const;
  bool is_caster_stasis();
  void set_caster_stasis(const bool new_caster_stasis);
  int maxlenof_caster_stasis() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.Roomba500Interface.msgq_first     = fawkes.Interface.msgq_first
fawkes.Roomba500Interface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.Roomba500Interface.create_message = fawkes.Interface.create_message

$]

}
