$#include <interfaces/DynamixelServoInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class DynamixelServoInterface : public Interface
{

  typedef enum {
    ERROR_NONE = 0,
    ERROR_UNSPECIFIC = 1,
    ERROR_COMMUNICATION = 2,
    ERROR_ANGLE_OUTOFRANGE = 4
  } ErrorCode;

  typedef enum {
    JOINT = 0,
    WHEEL = 1
  } WorkingMode;

  class StopMessage : public Message
  {
    StopMessage();
    ~StopMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  class FlushMessage : public Message
  {
    FlushMessage();
    ~FlushMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  class GotoMessage : public Message
  {
    GotoMessage(float ini_angle);
    GotoMessage();
    ~GotoMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float angle();
    void set_angle(const float new_angle);
    int maxlenof_angle() const;
  };

  class TimedGotoMessage : public Message
  {
    TimedGotoMessage(float ini_time_sec, float ini_angle);
    TimedGotoMessage();
    ~TimedGotoMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float time_sec();
    void set_time_sec(const float new_time_sec);
    int maxlenof_time_sec() const;
    float angle();
    void set_angle(const float new_angle);
    int maxlenof_angle() const;
  };

  class SetModeMessage : public Message
  {
    SetModeMessage(unsigned char ini_mode);
    SetModeMessage();
    ~SetModeMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned char mode();
    void set_mode(const unsigned char new_mode);
    int maxlenof_mode() const;
  };

  class SetSpeedMessage : public Message
  {
    SetSpeedMessage(unsigned short ini_speed);
    SetSpeedMessage();
    ~SetSpeedMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned short speed();
    void set_speed(const unsigned short new_speed);
    int maxlenof_speed() const;
  };

  class SetEnabledMessage : public Message
  {
    SetEnabledMessage(bool ini_enabled);
    SetEnabledMessage();
    ~SetEnabledMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    bool is_enabled();
    void set_enabled(const bool new_enabled);
    int maxlenof_enabled() const;
  };

  class SetVelocityMessage : public Message
  {
    SetVelocityMessage(float ini_velocity);
    SetVelocityMessage();
    ~SetVelocityMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float velocity();
    void set_velocity(const float new_velocity);
    int maxlenof_velocity() const;
  };

  class SetMarginMessage : public Message
  {
    SetMarginMessage(float ini_angle_margin);
    SetMarginMessage();
    ~SetMarginMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float angle_margin();
    void set_angle_margin(const float new_angle_margin);
    int maxlenof_angle_margin() const;
  };

  class SetComplianceValuesMessage : public Message
  {
    SetComplianceValuesMessage(unsigned char ini_cw_margin, unsigned char ini_ccw_margin, unsigned char ini_cw_slope, unsigned char ini_ccw_slope);
    SetComplianceValuesMessage();
    ~SetComplianceValuesMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned char cw_margin();
    void set_cw_margin(const unsigned char new_cw_margin);
    int maxlenof_cw_margin() const;
    unsigned char ccw_margin();
    void set_ccw_margin(const unsigned char new_ccw_margin);
    int maxlenof_ccw_margin() const;
    unsigned char cw_slope();
    void set_cw_slope(const unsigned char new_cw_slope);
    int maxlenof_cw_slope() const;
    unsigned char ccw_slope();
    void set_ccw_slope(const unsigned char new_ccw_slope);
    int maxlenof_ccw_slope() const;
  };

  class SetGoalSpeedMessage : public Message
  {
    SetGoalSpeedMessage(unsigned int ini_goal_speed);
    SetGoalSpeedMessage();
    ~SetGoalSpeedMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int goal_speed();
    void set_goal_speed(const unsigned int new_goal_speed);
    int maxlenof_goal_speed() const;
  };

  class SetTorqueLimitMessage : public Message
  {
    SetTorqueLimitMessage(unsigned int ini_torque_limit);
    SetTorqueLimitMessage();
    ~SetTorqueLimitMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int torque_limit();
    void set_torque_limit(const unsigned int new_torque_limit);
    int maxlenof_torque_limit() const;
  };

  class SetPunchMessage : public Message
  {
    SetPunchMessage(unsigned int ini_punch);
    SetPunchMessage();
    ~SetPunchMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int punch();
    void set_punch(const unsigned int new_punch);
    int maxlenof_punch() const;
  };

  class GotoPositionMessage : public Message
  {
    GotoPositionMessage(unsigned int ini_position);
    GotoPositionMessage();
    ~GotoPositionMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int position();
    void set_position(const unsigned int new_position);
    int maxlenof_position() const;
  };

  class SetAngleLimitsMessage : public Message
  {
    SetAngleLimitsMessage(unsigned int ini_angle_limit_cw, unsigned int ini_angle_limit_ccw);
    SetAngleLimitsMessage();
    ~SetAngleLimitsMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int angle_limit_cw();
    void set_angle_limit_cw(const unsigned int new_angle_limit_cw);
    int maxlenof_angle_limit_cw() const;
    unsigned int angle_limit_ccw();
    void set_angle_limit_ccw(const unsigned int new_angle_limit_ccw);
    int maxlenof_angle_limit_ccw() const;
  };

  class ResetRawErrorMessage : public Message
  {
    ResetRawErrorMessage();
    ~ResetRawErrorMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  class SetPreventAlarmShutdownMessage : public Message
  {
    SetPreventAlarmShutdownMessage(bool ini_enable_prevent_alarm_shutdown);
    SetPreventAlarmShutdownMessage();
    ~SetPreventAlarmShutdownMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    bool is_enable_prevent_alarm_shutdown();
    void set_enable_prevent_alarm_shutdown(const bool new_enable_prevent_alarm_shutdown);
    int maxlenof_enable_prevent_alarm_shutdown() const;
  };

  class SetAutorecoverEnabledMessage : public Message
  {
    SetAutorecoverEnabledMessage(bool ini_autorecover_enabled);
    SetAutorecoverEnabledMessage();
    ~SetAutorecoverEnabledMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    bool is_autorecover_enabled();
    void set_autorecover_enabled(const bool new_autorecover_enabled);
    int maxlenof_autorecover_enabled() const;
  };

  class RecoverMessage : public Message
  {
    RecoverMessage();
    ~RecoverMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  char * model();
  void set_model(const char * new_model);
  int maxlenof_model() const;
  unsigned int model_number();
  void set_model_number(const unsigned int new_model_number);
  int maxlenof_model_number() const;
  unsigned int cw_angle_limit();
  void set_cw_angle_limit(const unsigned int new_cw_angle_limit);
  int maxlenof_cw_angle_limit() const;
  unsigned int ccw_angle_limit();
  void set_ccw_angle_limit(const unsigned int new_ccw_angle_limit);
  int maxlenof_ccw_angle_limit() const;
  unsigned char temperature_limit();
  void set_temperature_limit(const unsigned char new_temperature_limit);
  int maxlenof_temperature_limit() const;
  unsigned int max_torque();
  void set_max_torque(const unsigned int new_max_torque);
  int maxlenof_max_torque() const;
  unsigned char cw_margin();
  void set_cw_margin(const unsigned char new_cw_margin);
  int maxlenof_cw_margin() const;
  unsigned char ccw_margin();
  void set_ccw_margin(const unsigned char new_ccw_margin);
  int maxlenof_ccw_margin() const;
  unsigned char cw_slope();
  void set_cw_slope(const unsigned char new_cw_slope);
  int maxlenof_cw_slope() const;
  unsigned char ccw_slope();
  void set_ccw_slope(const unsigned char new_ccw_slope);
  int maxlenof_ccw_slope() const;
  unsigned int goal_position();
  void set_goal_position(const unsigned int new_goal_position);
  int maxlenof_goal_position() const;
  unsigned int goal_speed();
  void set_goal_speed(const unsigned int new_goal_speed);
  int maxlenof_goal_speed() const;
  unsigned int torque_limit();
  void set_torque_limit(const unsigned int new_torque_limit);
  int maxlenof_torque_limit() const;
  unsigned int position();
  void set_position(const unsigned int new_position);
  int maxlenof_position() const;
  unsigned int speed();
  void set_speed(const unsigned int new_speed);
  int maxlenof_speed() const;
  unsigned int load();
  void set_load(const unsigned int new_load);
  int maxlenof_load() const;
  unsigned char voltage();
  void set_voltage(const unsigned char new_voltage);
  int maxlenof_voltage() const;
  unsigned char temperature();
  void set_temperature(const unsigned char new_temperature);
  int maxlenof_temperature() const;
  unsigned int punch();
  void set_punch(const unsigned int new_punch);
  int maxlenof_punch() const;
  unsigned char alarm_shutdown();
  void set_alarm_shutdown(const unsigned char new_alarm_shutdown);
  int maxlenof_alarm_shutdown() const;
  unsigned char error();
  void set_error(const unsigned char new_error);
  int maxlenof_error() const;
  bool is_enable_prevent_alarm_shutdown();
  void set_enable_prevent_alarm_shutdown(const bool new_enable_prevent_alarm_shutdown);
  int maxlenof_enable_prevent_alarm_shutdown() const;
  float angle();
  void set_angle(const float new_angle);
  int maxlenof_angle() const;
  bool is_enabled();
  void set_enabled(const bool new_enabled);
  int maxlenof_enabled() const;
  float min_angle();
  void set_min_angle(const float new_min_angle);
  int maxlenof_min_angle() const;
  float max_angle();
  void set_max_angle(const float new_max_angle);
  int maxlenof_max_angle() const;
  float max_velocity();
  void set_max_velocity(const float new_max_velocity);
  int maxlenof_max_velocity() const;
  float velocity();
  void set_velocity(const float new_velocity);
  int maxlenof_velocity() const;
  char * mode();
  void set_mode(const char * new_mode);
  int maxlenof_mode() const;
  float angle_margin();
  void set_angle_margin(const float new_angle_margin);
  int maxlenof_angle_margin() const;
  bool is_autorecover_enabled();
  void set_autorecover_enabled(const bool new_autorecover_enabled);
  int maxlenof_autorecover_enabled() const;
  unsigned int msgid();
  void set_msgid(const unsigned int new_msgid);
  int maxlenof_msgid() const;
  bool is_final();
  void set_final(const bool new_final);
  int maxlenof_final() const;
  ErrorCode error_code();
  void set_error_code(const ErrorCode new_error_code);
  int maxlenof_error_code() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.DynamixelServoInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.DynamixelServoInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.DynamixelServoInterface.create_message = fawkes.Interface.create_message

$]

}
