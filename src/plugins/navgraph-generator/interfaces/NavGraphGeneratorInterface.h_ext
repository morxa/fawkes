
/***************************************************************************
 *  NavGraphGeneratorInterface.h - Fawkes BlackBoard Interface - NavGraphGeneratorInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2015  Tim Niemueller
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_NAVGRAPHGENERATORINTERFACE_H_
#define __INTERFACES_NAVGRAPHGENERATORINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class NavGraphGeneratorInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(NavGraphGeneratorInterface)
 /// @endcond
 public:
  /* constants */

  /** Drive modes enum */
  typedef enum {
    NOT_CONNECTED /**< 
				The node is will not be initially connected.

				The difference to UNCONNECTED is that we do not connect the
				nodes just now, but will do so later, e.g. by adding
				edges. Note that it is an error not to connect the node later.
       */,
    UNCONNECTED /**< 
				The node is marked as unconnected and will not be connected to
				another node. This kind of nodes is useful to mark points and
				possibly assign properties without needing to travel to it.

				The difference to NOT_CONNECTED is that the nodes will be
				explicitly marked as not being connected and it is an error to
				connect them.
       */,
    CLOSEST_NODE /**< 
				Connect point to the node on the graph closest to the given
				point.
       */,
    CLOSEST_EDGE /**< 
				Connect point to the edge in which segment it lies, i.e. search
				for an edge where we can find a perpendicular line going
				through the given point and any point on the edge's line
				segment. If no such segment is found, the point cannot be
				added.
       */,
    CLOSEST_EDGE_OR_NODE /**< 
				First try the CLOSEST_EDGE method. If that yields no result,
				use the CLOSEST_NODE method as a fallback.
       */
  } ConnectionMode;
  const char * tostring_ConnectionMode(ConnectionMode value) const;

  /** Post-processing filtering type. */
  typedef enum {
    FILTER_EDGES_BY_MAP /**< 
				If enabled, filters out all edges after the map generation that
				pass too close by an occupied cell of the map. Use this to get
				rid of connections which "pass through walls".
				Note that this step is done before adding points of interest.
				Therefore edges going to POIs might still pass through or close
				by occupied cells.

				Parameters:
				distance: minimum distance from edges to occupied map grid
				cells to consider it safe.
       */,
    FILTER_ORPHAN_NODES /**< 
				If enabled, filters out all nodes which are not connected to
				any other node. These can occur, for example, after performing
				the FILTER_EDGES_BY_MAP filter.
       */,
    FILTER_MULTI_GRAPH /**< 
				Sometimes after applying other filters one can end up with
				multiple disconnected graphs. Enabling this filter will keep
				only the largest connected graph and simply remove all nodes
				and edges from smaller graphs not connected to the largest.
       */
  } FilterType;
  const char * tostring_FilterType(FilterType value) const;

  /** 
				When adding edges, the mode defines how to add edges.
       */
  typedef enum {
    NO_INTERSECTION /**< 
				Only insert edge if it does not intersect with any other
				existing edge in the graph.
       */,
    SPLIT_INTERSECTION /**< 
				If the new edge intersects with one or more edges, add new
				points at the intersections and split the edges for this
				point.
       */,
    FORCE /**< 
				The edge is added as-is, it may overlap or intersect with
				other edges.
       */
  } EdgeMode;
  const char * tostring_EdgeMode(EdgeMode value) const;

 private:
#pragma pack(push,4)
  /** Internal data storage, do NOT modify! */
  typedef struct {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    uint32_t msgid; /**< 
      The ID of the message that is currently being processed or
      was processed last.
     */
    bool final; /**< 
      True, if the last generation triggered by a ComputeMessage has
      been completed, false if it is still running. Also check the
      msgid field if this field applies to the correct message.
     */
  } NavGraphGeneratorInterface_data_t;
#pragma pack(pop)

  NavGraphGeneratorInterface_data_t *data;

  interface_enum_map_t enum_map_ConnectionMode;
  interface_enum_map_t enum_map_FilterType;
  interface_enum_map_t enum_map_EdgeMode;
 public:
  /* messages */
  class ClearMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } ClearMessage_data_t;
#pragma pack(pop)

    ClearMessage_data_t *data;

  interface_enum_map_t enum_map_ConnectionMode;
  interface_enum_map_t enum_map_FilterType;
  interface_enum_map_t enum_map_EdgeMode;
   public:
    ClearMessage();
    ~ClearMessage();

    ClearMessage(const ClearMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class SetBoundingBoxMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      float p1_x; /**< X coordinate of bbox start point in global frame. */
      float p1_y; /**< Y coordinate of bbox start point in global frame. */
      float p2_x; /**< X coordinate of bbox end point in global frame. */
      float p2_y; /**< Y coordinate of bbox end point in global frame. */
    } SetBoundingBoxMessage_data_t;
#pragma pack(pop)

    SetBoundingBoxMessage_data_t *data;

  interface_enum_map_t enum_map_ConnectionMode;
  interface_enum_map_t enum_map_FilterType;
  interface_enum_map_t enum_map_EdgeMode;
   public:
    SetBoundingBoxMessage(const float ini_p1_x, const float ini_p1_y, const float ini_p2_x, const float ini_p2_y);
    SetBoundingBoxMessage();
    ~SetBoundingBoxMessage();

    SetBoundingBoxMessage(const SetBoundingBoxMessage *m);
    /* Methods */
    float p1_x() const;
    void set_p1_x(const float new_p1_x);
    size_t maxlenof_p1_x() const;
    float p1_y() const;
    void set_p1_y(const float new_p1_y);
    size_t maxlenof_p1_y() const;
    float p2_x() const;
    void set_p2_x(const float new_p2_x);
    size_t maxlenof_p2_x() const;
    float p2_y() const;
    void set_p2_y(const float new_p2_y);
    size_t maxlenof_p2_y() const;
    virtual Message * clone() const;
  };

  class SetFilterMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      int32_t filter; /**< Which filter to
    enable/disable. */
      bool enable; /**< True to enable, false to
    disable */
    } SetFilterMessage_data_t;
#pragma pack(pop)

    SetFilterMessage_data_t *data;

  interface_enum_map_t enum_map_ConnectionMode;
  interface_enum_map_t enum_map_FilterType;
  interface_enum_map_t enum_map_EdgeMode;
   public:
    SetFilterMessage(const FilterType ini_filter, const bool ini_enable);
    SetFilterMessage();
    ~SetFilterMessage();

    SetFilterMessage(const SetFilterMessage *m);
    /* Methods */
    FilterType filter() const;
    void set_filter(const FilterType new_filter);
    size_t maxlenof_filter() const;
    bool is_enable() const;
    void set_enable(const bool new_enable);
    size_t maxlenof_enable() const;
    virtual Message * clone() const;
  };

  class SetFilterParamFloatMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      int32_t filter; /**< Which filter to
    enable/disable. */
      char param[32]; /**< Parameter name, see FilterType
    description for possible values. */
      float value; /**< True to enable, false to
    disable */
    } SetFilterParamFloatMessage_data_t;
#pragma pack(pop)

    SetFilterParamFloatMessage_data_t *data;

  interface_enum_map_t enum_map_ConnectionMode;
  interface_enum_map_t enum_map_FilterType;
  interface_enum_map_t enum_map_EdgeMode;
   public:
    SetFilterParamFloatMessage(const FilterType ini_filter, const char * ini_param, const float ini_value);
    SetFilterParamFloatMessage();
    ~SetFilterParamFloatMessage();

    SetFilterParamFloatMessage(const SetFilterParamFloatMessage *m);
    /* Methods */
    FilterType filter() const;
    void set_filter(const FilterType new_filter);
    size_t maxlenof_filter() const;
    char * param() const;
    void set_param(const char * new_param);
    size_t maxlenof_param() const;
    float value() const;
    void set_value(const float new_value);
    size_t maxlenof_value() const;
    virtual Message * clone() const;
  };

  class AddMapObstaclesMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      float max_line_point_distance; /**< 
      For points generated on lines found in the map, do not exceed
      this threshold in terms of maximum distance of points on line.
     */
    } AddMapObstaclesMessage_data_t;
#pragma pack(pop)

    AddMapObstaclesMessage_data_t *data;

  interface_enum_map_t enum_map_ConnectionMode;
  interface_enum_map_t enum_map_FilterType;
  interface_enum_map_t enum_map_EdgeMode;
   public:
    AddMapObstaclesMessage(const float ini_max_line_point_distance);
    AddMapObstaclesMessage();
    ~AddMapObstaclesMessage();

    AddMapObstaclesMessage(const AddMapObstaclesMessage *m);
    /* Methods */
    float max_line_point_distance() const;
    void set_max_line_point_distance(const float new_max_line_point_distance);
    size_t maxlenof_max_line_point_distance() const;
    virtual Message * clone() const;
  };

  class AddObstacleMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char name[64]; /**< 
      ID of the obstacle. Can later be used to remove it again.
     */
      float x; /**< X coordinate of obstacle in global frame. */
      float y; /**< Y coordinate of obstacle in global frame. */
    } AddObstacleMessage_data_t;
#pragma pack(pop)

    AddObstacleMessage_data_t *data;

  interface_enum_map_t enum_map_ConnectionMode;
  interface_enum_map_t enum_map_FilterType;
  interface_enum_map_t enum_map_EdgeMode;
   public:
    AddObstacleMessage(const char * ini_name, const float ini_x, const float ini_y);
    AddObstacleMessage();
    ~AddObstacleMessage();

    AddObstacleMessage(const AddObstacleMessage *m);
    /* Methods */
    char * name() const;
    void set_name(const char * new_name);
    size_t maxlenof_name() const;
    float x() const;
    void set_x(const float new_x);
    size_t maxlenof_x() const;
    float y() const;
    void set_y(const float new_y);
    size_t maxlenof_y() const;
    virtual Message * clone() const;
  };

  class RemoveObstacleMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char name[64]; /**< 
      ID of the obstacle to remove.
     */
    } RemoveObstacleMessage_data_t;
#pragma pack(pop)

    RemoveObstacleMessage_data_t *data;

  interface_enum_map_t enum_map_ConnectionMode;
  interface_enum_map_t enum_map_FilterType;
  interface_enum_map_t enum_map_EdgeMode;
   public:
    RemoveObstacleMessage(const char * ini_name);
    RemoveObstacleMessage();
    ~RemoveObstacleMessage();

    RemoveObstacleMessage(const RemoveObstacleMessage *m);
    /* Methods */
    char * name() const;
    void set_name(const char * new_name);
    size_t maxlenof_name() const;
    virtual Message * clone() const;
  };

  class AddPointOfInterestMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char name[64]; /**< 
      ID of the obstacle. Can later be used to remove it again.
     */
      float x; /**< X coordinate of obstacle in global frame. */
      float y; /**< Y coordinate of obstacle in global frame. */
      int32_t mode; /**< 
      The connection mode to use to connect the POI with the graph.
     */
    } AddPointOfInterestMessage_data_t;
#pragma pack(pop)

    AddPointOfInterestMessage_data_t *data;

  interface_enum_map_t enum_map_ConnectionMode;
  interface_enum_map_t enum_map_FilterType;
  interface_enum_map_t enum_map_EdgeMode;
   public:
    AddPointOfInterestMessage(const char * ini_name, const float ini_x, const float ini_y, const ConnectionMode ini_mode);
    AddPointOfInterestMessage();
    ~AddPointOfInterestMessage();

    AddPointOfInterestMessage(const AddPointOfInterestMessage *m);
    /* Methods */
    char * name() const;
    void set_name(const char * new_name);
    size_t maxlenof_name() const;
    float x() const;
    void set_x(const float new_x);
    size_t maxlenof_x() const;
    float y() const;
    void set_y(const float new_y);
    size_t maxlenof_y() const;
    ConnectionMode mode() const;
    void set_mode(const ConnectionMode new_mode);
    size_t maxlenof_mode() const;
    virtual Message * clone() const;
  };

  class AddPointOfInterestWithOriMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char name[64]; /**< 
      ID of the obstacle. Can later be used to remove it again.
     */
      float x; /**< X coordinate of obstacle in global frame. */
      float y; /**< Y coordinate of obstacle in global frame. */
      float ori; /**< Orientation for target point (rad). */
      int32_t mode; /**< 
      The connection mode to use to connect the POI with the graph.
     */
    } AddPointOfInterestWithOriMessage_data_t;
#pragma pack(pop)

    AddPointOfInterestWithOriMessage_data_t *data;

  interface_enum_map_t enum_map_ConnectionMode;
  interface_enum_map_t enum_map_FilterType;
  interface_enum_map_t enum_map_EdgeMode;
   public:
    AddPointOfInterestWithOriMessage(const char * ini_name, const float ini_x, const float ini_y, const float ini_ori, const ConnectionMode ini_mode);
    AddPointOfInterestWithOriMessage();
    ~AddPointOfInterestWithOriMessage();

    AddPointOfInterestWithOriMessage(const AddPointOfInterestWithOriMessage *m);
    /* Methods */
    char * name() const;
    void set_name(const char * new_name);
    size_t maxlenof_name() const;
    float x() const;
    void set_x(const float new_x);
    size_t maxlenof_x() const;
    float y() const;
    void set_y(const float new_y);
    size_t maxlenof_y() const;
    float ori() const;
    void set_ori(const float new_ori);
    size_t maxlenof_ori() const;
    ConnectionMode mode() const;
    void set_mode(const ConnectionMode new_mode);
    size_t maxlenof_mode() const;
    virtual Message * clone() const;
  };

  class SetPointOfInterestPropertyMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char name[64]; /**< 
      ID of the point of interest.
     */
      char property_name[64]; /**< Name of the property to set. */
      char property_value[1024]; /**< Value of the property
    to set. */
    } SetPointOfInterestPropertyMessage_data_t;
#pragma pack(pop)

    SetPointOfInterestPropertyMessage_data_t *data;

  interface_enum_map_t enum_map_ConnectionMode;
  interface_enum_map_t enum_map_FilterType;
  interface_enum_map_t enum_map_EdgeMode;
   public:
    SetPointOfInterestPropertyMessage(const char * ini_name, const char * ini_property_name, const char * ini_property_value);
    SetPointOfInterestPropertyMessage();
    ~SetPointOfInterestPropertyMessage();

    SetPointOfInterestPropertyMessage(const SetPointOfInterestPropertyMessage *m);
    /* Methods */
    char * name() const;
    void set_name(const char * new_name);
    size_t maxlenof_name() const;
    char * property_name() const;
    void set_property_name(const char * new_property_name);
    size_t maxlenof_property_name() const;
    char * property_value() const;
    void set_property_value(const char * new_property_value);
    size_t maxlenof_property_value() const;
    virtual Message * clone() const;
  };

  class AddEdgeMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char p1[64]; /**< ID of first node. */
      char p2[64]; /**< ID of second node. */
      bool directed; /**< 
      True to create a directed edge from p1 to p2, otherwise the edge
      is assumed to be undirected.
     */
      int32_t mode; /**< The edge insertion mode. */
    } AddEdgeMessage_data_t;
#pragma pack(pop)

    AddEdgeMessage_data_t *data;

  interface_enum_map_t enum_map_ConnectionMode;
  interface_enum_map_t enum_map_FilterType;
  interface_enum_map_t enum_map_EdgeMode;
   public:
    AddEdgeMessage(const char * ini_p1, const char * ini_p2, const bool ini_directed, const EdgeMode ini_mode);
    AddEdgeMessage();
    ~AddEdgeMessage();

    AddEdgeMessage(const AddEdgeMessage *m);
    /* Methods */
    char * p1() const;
    void set_p1(const char * new_p1);
    size_t maxlenof_p1() const;
    char * p2() const;
    void set_p2(const char * new_p2);
    size_t maxlenof_p2() const;
    bool is_directed() const;
    void set_directed(const bool new_directed);
    size_t maxlenof_directed() const;
    EdgeMode mode() const;
    void set_mode(const EdgeMode new_mode);
    size_t maxlenof_mode() const;
    virtual Message * clone() const;
  };

  class SetGraphDefaultPropertyMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char property_name[64]; /**< Name of the property to set. */
      char property_value[1024]; /**< Value of the property
    to set. */
    } SetGraphDefaultPropertyMessage_data_t;
#pragma pack(pop)

    SetGraphDefaultPropertyMessage_data_t *data;

  interface_enum_map_t enum_map_ConnectionMode;
  interface_enum_map_t enum_map_FilterType;
  interface_enum_map_t enum_map_EdgeMode;
   public:
    SetGraphDefaultPropertyMessage(const char * ini_property_name, const char * ini_property_value);
    SetGraphDefaultPropertyMessage();
    ~SetGraphDefaultPropertyMessage();

    SetGraphDefaultPropertyMessage(const SetGraphDefaultPropertyMessage *m);
    /* Methods */
    char * property_name() const;
    void set_property_name(const char * new_property_name);
    size_t maxlenof_property_name() const;
    char * property_value() const;
    void set_property_value(const char * new_property_value);
    size_t maxlenof_property_value() const;
    virtual Message * clone() const;
  };

  class SetCopyGraphDefaultPropertiesMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      bool enable_copy; /**< True to enable copying
    (default) false to disable). */
    } SetCopyGraphDefaultPropertiesMessage_data_t;
#pragma pack(pop)

    SetCopyGraphDefaultPropertiesMessage_data_t *data;

  interface_enum_map_t enum_map_ConnectionMode;
  interface_enum_map_t enum_map_FilterType;
  interface_enum_map_t enum_map_EdgeMode;
   public:
    SetCopyGraphDefaultPropertiesMessage(const bool ini_enable_copy);
    SetCopyGraphDefaultPropertiesMessage();
    ~SetCopyGraphDefaultPropertiesMessage();

    SetCopyGraphDefaultPropertiesMessage(const SetCopyGraphDefaultPropertiesMessage *m);
    /* Methods */
    bool is_enable_copy() const;
    void set_enable_copy(const bool new_enable_copy);
    size_t maxlenof_enable_copy() const;
    virtual Message * clone() const;
  };

  class RemovePointOfInterestMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char name[64]; /**< 
      ID of the obstacle to remove.
     */
    } RemovePointOfInterestMessage_data_t;
#pragma pack(pop)

    RemovePointOfInterestMessage_data_t *data;

  interface_enum_map_t enum_map_ConnectionMode;
  interface_enum_map_t enum_map_FilterType;
  interface_enum_map_t enum_map_EdgeMode;
   public:
    RemovePointOfInterestMessage(const char * ini_name);
    RemovePointOfInterestMessage();
    ~RemovePointOfInterestMessage();

    RemovePointOfInterestMessage(const RemovePointOfInterestMessage *m);
    /* Methods */
    char * name() const;
    void set_name(const char * new_name);
    size_t maxlenof_name() const;
    virtual Message * clone() const;
  };

  class ComputeMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } ComputeMessage_data_t;
#pragma pack(pop)

    ComputeMessage_data_t *data;

  interface_enum_map_t enum_map_ConnectionMode;
  interface_enum_map_t enum_map_FilterType;
  interface_enum_map_t enum_map_EdgeMode;
   public:
    ComputeMessage();
    ~ComputeMessage();

    ComputeMessage(const ComputeMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  NavGraphGeneratorInterface();
  ~NavGraphGeneratorInterface();

 public:
  /* Methods */
  uint32_t msgid() const;
  void set_msgid(const uint32_t new_msgid);
  size_t maxlenof_msgid() const;
  bool is_final() const;
  void set_final(const bool new_final);
  size_t maxlenof_final() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
