$#include <interfaces/NavGraphGeneratorInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class NavGraphGeneratorInterface : public Interface
{

  typedef enum {
    NOT_CONNECTED,
    UNCONNECTED,
    CLOSEST_NODE,
    CLOSEST_EDGE,
    CLOSEST_EDGE_OR_NODE
  } ConnectionMode;

  typedef enum {
    FILTER_EDGES_BY_MAP,
    FILTER_ORPHAN_NODES,
    FILTER_MULTI_GRAPH
  } FilterType;

  typedef enum {
    NO_INTERSECTION,
    SPLIT_INTERSECTION,
    FORCE
  } EdgeMode;

  class ClearMessage : public Message
  {
    ClearMessage();
    ~ClearMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  class SetBoundingBoxMessage : public Message
  {
    SetBoundingBoxMessage(float ini_p1_x, float ini_p1_y, float ini_p2_x, float ini_p2_y);
    SetBoundingBoxMessage();
    ~SetBoundingBoxMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float p1_x();
    void set_p1_x(const float new_p1_x);
    int maxlenof_p1_x() const;
    float p1_y();
    void set_p1_y(const float new_p1_y);
    int maxlenof_p1_y() const;
    float p2_x();
    void set_p2_x(const float new_p2_x);
    int maxlenof_p2_x() const;
    float p2_y();
    void set_p2_y(const float new_p2_y);
    int maxlenof_p2_y() const;
  };

  class SetFilterMessage : public Message
  {
    SetFilterMessage(FilterType ini_filter, bool ini_enable);
    SetFilterMessage();
    ~SetFilterMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    FilterType filter();
    void set_filter(const FilterType new_filter);
    int maxlenof_filter() const;
    bool is_enable();
    void set_enable(const bool new_enable);
    int maxlenof_enable() const;
  };

  class SetFilterParamFloatMessage : public Message
  {
    SetFilterParamFloatMessage(FilterType ini_filter, char * ini_param, float ini_value);
    SetFilterParamFloatMessage();
    ~SetFilterParamFloatMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    FilterType filter();
    void set_filter(const FilterType new_filter);
    int maxlenof_filter() const;
    char * param();
    void set_param(const char * new_param);
    int maxlenof_param() const;
    float value();
    void set_value(const float new_value);
    int maxlenof_value() const;
  };

  class AddMapObstaclesMessage : public Message
  {
    AddMapObstaclesMessage(float ini_max_line_point_distance);
    AddMapObstaclesMessage();
    ~AddMapObstaclesMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float max_line_point_distance();
    void set_max_line_point_distance(const float new_max_line_point_distance);
    int maxlenof_max_line_point_distance() const;
  };

  class AddObstacleMessage : public Message
  {
    AddObstacleMessage(char * ini_name, float ini_x, float ini_y);
    AddObstacleMessage();
    ~AddObstacleMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * name();
    void set_name(const char * new_name);
    int maxlenof_name() const;
    float x();
    void set_x(const float new_x);
    int maxlenof_x() const;
    float y();
    void set_y(const float new_y);
    int maxlenof_y() const;
  };

  class RemoveObstacleMessage : public Message
  {
    RemoveObstacleMessage(char * ini_name);
    RemoveObstacleMessage();
    ~RemoveObstacleMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * name();
    void set_name(const char * new_name);
    int maxlenof_name() const;
  };

  class AddPointOfInterestMessage : public Message
  {
    AddPointOfInterestMessage(char * ini_name, float ini_x, float ini_y, ConnectionMode ini_mode);
    AddPointOfInterestMessage();
    ~AddPointOfInterestMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * name();
    void set_name(const char * new_name);
    int maxlenof_name() const;
    float x();
    void set_x(const float new_x);
    int maxlenof_x() const;
    float y();
    void set_y(const float new_y);
    int maxlenof_y() const;
    ConnectionMode mode();
    void set_mode(const ConnectionMode new_mode);
    int maxlenof_mode() const;
  };

  class AddPointOfInterestWithOriMessage : public Message
  {
    AddPointOfInterestWithOriMessage(char * ini_name, float ini_x, float ini_y, float ini_ori, ConnectionMode ini_mode);
    AddPointOfInterestWithOriMessage();
    ~AddPointOfInterestWithOriMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * name();
    void set_name(const char * new_name);
    int maxlenof_name() const;
    float x();
    void set_x(const float new_x);
    int maxlenof_x() const;
    float y();
    void set_y(const float new_y);
    int maxlenof_y() const;
    float ori();
    void set_ori(const float new_ori);
    int maxlenof_ori() const;
    ConnectionMode mode();
    void set_mode(const ConnectionMode new_mode);
    int maxlenof_mode() const;
  };

  class SetPointOfInterestPropertyMessage : public Message
  {
    SetPointOfInterestPropertyMessage(char * ini_name, char * ini_property_name, char * ini_property_value);
    SetPointOfInterestPropertyMessage();
    ~SetPointOfInterestPropertyMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * name();
    void set_name(const char * new_name);
    int maxlenof_name() const;
    char * property_name();
    void set_property_name(const char * new_property_name);
    int maxlenof_property_name() const;
    char * property_value();
    void set_property_value(const char * new_property_value);
    int maxlenof_property_value() const;
  };

  class AddEdgeMessage : public Message
  {
    AddEdgeMessage(char * ini_p1, char * ini_p2, bool ini_directed, EdgeMode ini_mode);
    AddEdgeMessage();
    ~AddEdgeMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * p1();
    void set_p1(const char * new_p1);
    int maxlenof_p1() const;
    char * p2();
    void set_p2(const char * new_p2);
    int maxlenof_p2() const;
    bool is_directed();
    void set_directed(const bool new_directed);
    int maxlenof_directed() const;
    EdgeMode mode();
    void set_mode(const EdgeMode new_mode);
    int maxlenof_mode() const;
  };

  class SetGraphDefaultPropertyMessage : public Message
  {
    SetGraphDefaultPropertyMessage(char * ini_property_name, char * ini_property_value);
    SetGraphDefaultPropertyMessage();
    ~SetGraphDefaultPropertyMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * property_name();
    void set_property_name(const char * new_property_name);
    int maxlenof_property_name() const;
    char * property_value();
    void set_property_value(const char * new_property_value);
    int maxlenof_property_value() const;
  };

  class SetCopyGraphDefaultPropertiesMessage : public Message
  {
    SetCopyGraphDefaultPropertiesMessage(bool ini_enable_copy);
    SetCopyGraphDefaultPropertiesMessage();
    ~SetCopyGraphDefaultPropertiesMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    bool is_enable_copy();
    void set_enable_copy(const bool new_enable_copy);
    int maxlenof_enable_copy() const;
  };

  class RemovePointOfInterestMessage : public Message
  {
    RemovePointOfInterestMessage(char * ini_name);
    RemovePointOfInterestMessage();
    ~RemovePointOfInterestMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * name();
    void set_name(const char * new_name);
    int maxlenof_name() const;
  };

  class ComputeMessage : public Message
  {
    ComputeMessage();
    ~ComputeMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  unsigned int msgid();
  void set_msgid(const unsigned int new_msgid);
  int maxlenof_msgid() const;
  bool is_final();
  void set_final(const bool new_final);
  int maxlenof_final() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.NavGraphGeneratorInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.NavGraphGeneratorInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.NavGraphGeneratorInterface.create_message = fawkes.Interface.create_message

$]

}
