$#include <interfaces/OpenCVStereoParamsInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class OpenCVStereoParamsInterface : public Interface
{

  typedef enum {
    PFT_NORMALIZED_RESPONSE,
    PFT_XSOBEL
  } PreFilterType;

  class SetPreFilterTypeMessage : public Message
  {
    SetPreFilterTypeMessage(PreFilterType ini_pre_filter_type);
    SetPreFilterTypeMessage();
    ~SetPreFilterTypeMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    PreFilterType pre_filter_type();
    void set_pre_filter_type(const PreFilterType new_pre_filter_type);
    int maxlenof_pre_filter_type() const;
  };

  class SetPreFilterSizeMessage : public Message
  {
    SetPreFilterSizeMessage(unsigned int ini_pre_filter_size);
    SetPreFilterSizeMessage();
    ~SetPreFilterSizeMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int pre_filter_size();
    void set_pre_filter_size(const unsigned int new_pre_filter_size);
    int maxlenof_pre_filter_size() const;
  };

  class SetPreFilterCapMessage : public Message
  {
    SetPreFilterCapMessage(unsigned int ini_pre_filter_cap);
    SetPreFilterCapMessage();
    ~SetPreFilterCapMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int pre_filter_cap();
    void set_pre_filter_cap(const unsigned int new_pre_filter_cap);
    int maxlenof_pre_filter_cap() const;
  };

  class SetSADWindowSizeMessage : public Message
  {
    SetSADWindowSizeMessage(unsigned int ini_sad_window_size);
    SetSADWindowSizeMessage();
    ~SetSADWindowSizeMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int sad_window_size();
    void set_sad_window_size(const unsigned int new_sad_window_size);
    int maxlenof_sad_window_size() const;
  };

  class SetMinDisparityMessage : public Message
  {
    SetMinDisparityMessage(int ini_min_disparity);
    SetMinDisparityMessage();
    ~SetMinDisparityMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    int min_disparity();
    void set_min_disparity(const int new_min_disparity);
    int maxlenof_min_disparity() const;
  };

  class SetNumDisparitiesMessage : public Message
  {
    SetNumDisparitiesMessage(unsigned int ini_num_disparities);
    SetNumDisparitiesMessage();
    ~SetNumDisparitiesMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int num_disparities();
    void set_num_disparities(const unsigned int new_num_disparities);
    int maxlenof_num_disparities() const;
  };

  class SetTextureThresholdMessage : public Message
  {
    SetTextureThresholdMessage(unsigned int ini_texture_threshold);
    SetTextureThresholdMessage();
    ~SetTextureThresholdMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int texture_threshold();
    void set_texture_threshold(const unsigned int new_texture_threshold);
    int maxlenof_texture_threshold() const;
  };

  class SetUniquenessRatioMessage : public Message
  {
    SetUniquenessRatioMessage(unsigned int ini_uniqueness_ratio);
    SetUniquenessRatioMessage();
    ~SetUniquenessRatioMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int uniqueness_ratio();
    void set_uniqueness_ratio(const unsigned int new_uniqueness_ratio);
    int maxlenof_uniqueness_ratio() const;
  };

  class SetSpeckleWindowSizeMessage : public Message
  {
    SetSpeckleWindowSizeMessage(unsigned int ini_speckle_window_size);
    SetSpeckleWindowSizeMessage();
    ~SetSpeckleWindowSizeMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int speckle_window_size();
    void set_speckle_window_size(const unsigned int new_speckle_window_size);
    int maxlenof_speckle_window_size() const;
  };

  class SetSpeckleRangeMessage : public Message
  {
    SetSpeckleRangeMessage(unsigned int ini_speckle_range);
    SetSpeckleRangeMessage();
    ~SetSpeckleRangeMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int speckle_range();
    void set_speckle_range(const unsigned int new_speckle_range);
    int maxlenof_speckle_range() const;
  };

  class SetTrySmallerWindowsMessage : public Message
  {
    SetTrySmallerWindowsMessage(bool ini_try_smaller_windows);
    SetTrySmallerWindowsMessage();
    ~SetTrySmallerWindowsMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    bool is_try_smaller_windows();
    void set_try_smaller_windows(const bool new_try_smaller_windows);
    int maxlenof_try_smaller_windows() const;
  };

  PreFilterType pre_filter_type();
  void set_pre_filter_type(const PreFilterType new_pre_filter_type);
  int maxlenof_pre_filter_type() const;
  unsigned int pre_filter_size();
  void set_pre_filter_size(const unsigned int new_pre_filter_size);
  int maxlenof_pre_filter_size() const;
  unsigned int pre_filter_cap();
  void set_pre_filter_cap(const unsigned int new_pre_filter_cap);
  int maxlenof_pre_filter_cap() const;
  unsigned int sad_window_size();
  void set_sad_window_size(const unsigned int new_sad_window_size);
  int maxlenof_sad_window_size() const;
  int min_disparity();
  void set_min_disparity(const int new_min_disparity);
  int maxlenof_min_disparity() const;
  unsigned int num_disparities();
  void set_num_disparities(const unsigned int new_num_disparities);
  int maxlenof_num_disparities() const;
  unsigned int texture_threshold();
  void set_texture_threshold(const unsigned int new_texture_threshold);
  int maxlenof_texture_threshold() const;
  unsigned int uniqueness_ratio();
  void set_uniqueness_ratio(const unsigned int new_uniqueness_ratio);
  int maxlenof_uniqueness_ratio() const;
  unsigned int speckle_window_size();
  void set_speckle_window_size(const unsigned int new_speckle_window_size);
  int maxlenof_speckle_window_size() const;
  unsigned int speckle_range();
  void set_speckle_range(const unsigned int new_speckle_range);
  int maxlenof_speckle_range() const;
  bool is_try_smaller_windows();
  void set_try_smaller_windows(const bool new_try_smaller_windows);
  int maxlenof_try_smaller_windows() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.OpenCVStereoParamsInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.OpenCVStereoParamsInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.OpenCVStereoParamsInterface.create_message = fawkes.Interface.create_message

$]

}
