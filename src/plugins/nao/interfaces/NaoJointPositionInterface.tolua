$#include <interfaces/NaoJointPositionInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class NaoJointPositionInterface : public Interface
{
  static const unsigned int SERVO_head_yaw;
  static const unsigned int SERVO_head_pitch;
  static const unsigned int SERVO_l_shoulder_pitch;
  static const unsigned int SERVO_l_shoulder_roll;
  static const unsigned int SERVO_l_elbow_yaw;
  static const unsigned int SERVO_l_elbow_roll;
  static const unsigned int SERVO_l_wrist_yaw;
  static const unsigned int SERVO_l_hand;
  static const unsigned int SERVO_l_hip_yaw_pitch;
  static const unsigned int SERVO_l_hip_roll;
  static const unsigned int SERVO_l_hip_pitch;
  static const unsigned int SERVO_l_knee_pitch;
  static const unsigned int SERVO_l_ankle_pitch;
  static const unsigned int SERVO_l_ankle_roll;
  static const unsigned int SERVO_r_shoulder_pitch;
  static const unsigned int SERVO_r_shoulder_roll;
  static const unsigned int SERVO_r_elbow_yaw;
  static const unsigned int SERVO_r_elbow_roll;
  static const unsigned int SERVO_r_wrist_yaw;
  static const unsigned int SERVO_r_hand;
  static const unsigned int SERVO_r_hip_yaw_pitch;
  static const unsigned int SERVO_r_hip_roll;
  static const unsigned int SERVO_r_hip_pitch;
  static const unsigned int SERVO_r_knee_pitch;
  static const unsigned int SERVO_r_ankle_pitch;
  static const unsigned int SERVO_r_ankle_roll;
  static const unsigned int SERVO_min;
  static const unsigned int SERVO_max;

  typedef enum {
    ROBOTYPE_ACADEMIC,
    ROBOTYPE_ROBOCUP
  } RobotType;

  class SetServoMessage : public Message
  {
    SetServoMessage(unsigned int ini_servo, float ini_value, int ini_time);
    SetServoMessage();
    ~SetServoMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int servo();
    void set_servo(const unsigned int new_servo);
    int maxlenof_servo() const;
    float value();
    void set_value(const float new_value);
    int maxlenof_value() const;
    int time();
    void set_time(const int new_time);
    int maxlenof_time() const;
  };

  class SetServosMessage : public Message
  {
    SetServosMessage(float ini_head_yaw, float ini_head_pitch, float ini_l_shoulder_pitch, float ini_l_shoulder_roll, float ini_l_elbow_yaw, float ini_l_elbow_roll, float ini_l_hip_yaw_pitch, float ini_l_hip_roll, float ini_l_hip_pitch, float ini_l_knee_pitch, float ini_l_ankle_pitch, float ini_l_ankle_roll, float ini_l_wrist_yaw, float ini_l_hand, float ini_r_shoulder_pitch, float ini_r_shoulder_roll, float ini_r_elbow_yaw, float ini_r_elbow_roll, float ini_r_wrist_yaw, float ini_r_hand, float ini_r_hip_yaw_pitch, float ini_r_hip_roll, float ini_r_hip_pitch, float ini_r_knee_pitch, float ini_r_ankle_pitch, float ini_r_ankle_roll, int ini_time);
    SetServosMessage();
    ~SetServosMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float head_yaw();
    void set_head_yaw(const float new_head_yaw);
    int maxlenof_head_yaw() const;
    float head_pitch();
    void set_head_pitch(const float new_head_pitch);
    int maxlenof_head_pitch() const;
    float l_shoulder_pitch();
    void set_l_shoulder_pitch(const float new_l_shoulder_pitch);
    int maxlenof_l_shoulder_pitch() const;
    float l_shoulder_roll();
    void set_l_shoulder_roll(const float new_l_shoulder_roll);
    int maxlenof_l_shoulder_roll() const;
    float l_elbow_yaw();
    void set_l_elbow_yaw(const float new_l_elbow_yaw);
    int maxlenof_l_elbow_yaw() const;
    float l_elbow_roll();
    void set_l_elbow_roll(const float new_l_elbow_roll);
    int maxlenof_l_elbow_roll() const;
    float l_hip_yaw_pitch();
    void set_l_hip_yaw_pitch(const float new_l_hip_yaw_pitch);
    int maxlenof_l_hip_yaw_pitch() const;
    float l_hip_roll();
    void set_l_hip_roll(const float new_l_hip_roll);
    int maxlenof_l_hip_roll() const;
    float l_hip_pitch();
    void set_l_hip_pitch(const float new_l_hip_pitch);
    int maxlenof_l_hip_pitch() const;
    float l_knee_pitch();
    void set_l_knee_pitch(const float new_l_knee_pitch);
    int maxlenof_l_knee_pitch() const;
    float l_ankle_pitch();
    void set_l_ankle_pitch(const float new_l_ankle_pitch);
    int maxlenof_l_ankle_pitch() const;
    float l_ankle_roll();
    void set_l_ankle_roll(const float new_l_ankle_roll);
    int maxlenof_l_ankle_roll() const;
    float l_wrist_yaw();
    void set_l_wrist_yaw(const float new_l_wrist_yaw);
    int maxlenof_l_wrist_yaw() const;
    float l_hand();
    void set_l_hand(const float new_l_hand);
    int maxlenof_l_hand() const;
    float r_shoulder_pitch();
    void set_r_shoulder_pitch(const float new_r_shoulder_pitch);
    int maxlenof_r_shoulder_pitch() const;
    float r_shoulder_roll();
    void set_r_shoulder_roll(const float new_r_shoulder_roll);
    int maxlenof_r_shoulder_roll() const;
    float r_elbow_yaw();
    void set_r_elbow_yaw(const float new_r_elbow_yaw);
    int maxlenof_r_elbow_yaw() const;
    float r_elbow_roll();
    void set_r_elbow_roll(const float new_r_elbow_roll);
    int maxlenof_r_elbow_roll() const;
    float r_wrist_yaw();
    void set_r_wrist_yaw(const float new_r_wrist_yaw);
    int maxlenof_r_wrist_yaw() const;
    float r_hand();
    void set_r_hand(const float new_r_hand);
    int maxlenof_r_hand() const;
    float r_hip_yaw_pitch();
    void set_r_hip_yaw_pitch(const float new_r_hip_yaw_pitch);
    int maxlenof_r_hip_yaw_pitch() const;
    float r_hip_roll();
    void set_r_hip_roll(const float new_r_hip_roll);
    int maxlenof_r_hip_roll() const;
    float r_hip_pitch();
    void set_r_hip_pitch(const float new_r_hip_pitch);
    int maxlenof_r_hip_pitch() const;
    float r_knee_pitch();
    void set_r_knee_pitch(const float new_r_knee_pitch);
    int maxlenof_r_knee_pitch() const;
    float r_ankle_pitch();
    void set_r_ankle_pitch(const float new_r_ankle_pitch);
    int maxlenof_r_ankle_pitch() const;
    float r_ankle_roll();
    void set_r_ankle_roll(const float new_r_ankle_roll);
    int maxlenof_r_ankle_roll() const;
    int time();
    void set_time(const int new_time);
    int maxlenof_time() const;
  };

  class MoveServoMessage : public Message
  {
    MoveServoMessage(unsigned int ini_servo, float ini_value, float ini_speed);
    MoveServoMessage();
    ~MoveServoMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned int servo();
    void set_servo(const unsigned int new_servo);
    int maxlenof_servo() const;
    float value();
    void set_value(const float new_value);
    int maxlenof_value() const;
    float speed();
    void set_speed(const float new_speed);
    int maxlenof_speed() const;
  };

  class MoveServosMessage : public Message
  {
    MoveServosMessage(float ini_speed, float ini_head_yaw, float ini_head_pitch, float ini_l_shoulder_pitch, float ini_l_shoulder_roll, float ini_l_elbow_yaw, float ini_l_elbow_roll, float ini_l_wrist_yaw, float ini_l_hand, float ini_l_hip_yaw_pitch, float ini_l_hip_roll, float ini_l_hip_pitch, float ini_l_knee_pitch, float ini_l_ankle_pitch, float ini_l_ankle_roll, float ini_r_shoulder_pitch, float ini_r_shoulder_roll, float ini_r_elbow_yaw, float ini_r_elbow_roll, float ini_r_wrist_yaw, float ini_r_hand, float ini_r_hip_yaw_pitch, float ini_r_hip_roll, float ini_r_hip_pitch, float ini_r_knee_pitch, float ini_r_ankle_pitch, float ini_r_ankle_roll);
    MoveServosMessage();
    ~MoveServosMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    float speed();
    void set_speed(const float new_speed);
    int maxlenof_speed() const;
    float head_yaw();
    void set_head_yaw(const float new_head_yaw);
    int maxlenof_head_yaw() const;
    float head_pitch();
    void set_head_pitch(const float new_head_pitch);
    int maxlenof_head_pitch() const;
    float l_shoulder_pitch();
    void set_l_shoulder_pitch(const float new_l_shoulder_pitch);
    int maxlenof_l_shoulder_pitch() const;
    float l_shoulder_roll();
    void set_l_shoulder_roll(const float new_l_shoulder_roll);
    int maxlenof_l_shoulder_roll() const;
    float l_elbow_yaw();
    void set_l_elbow_yaw(const float new_l_elbow_yaw);
    int maxlenof_l_elbow_yaw() const;
    float l_elbow_roll();
    void set_l_elbow_roll(const float new_l_elbow_roll);
    int maxlenof_l_elbow_roll() const;
    float l_wrist_yaw();
    void set_l_wrist_yaw(const float new_l_wrist_yaw);
    int maxlenof_l_wrist_yaw() const;
    float l_hand();
    void set_l_hand(const float new_l_hand);
    int maxlenof_l_hand() const;
    float l_hip_yaw_pitch();
    void set_l_hip_yaw_pitch(const float new_l_hip_yaw_pitch);
    int maxlenof_l_hip_yaw_pitch() const;
    float l_hip_roll();
    void set_l_hip_roll(const float new_l_hip_roll);
    int maxlenof_l_hip_roll() const;
    float l_hip_pitch();
    void set_l_hip_pitch(const float new_l_hip_pitch);
    int maxlenof_l_hip_pitch() const;
    float l_knee_pitch();
    void set_l_knee_pitch(const float new_l_knee_pitch);
    int maxlenof_l_knee_pitch() const;
    float l_ankle_pitch();
    void set_l_ankle_pitch(const float new_l_ankle_pitch);
    int maxlenof_l_ankle_pitch() const;
    float l_ankle_roll();
    void set_l_ankle_roll(const float new_l_ankle_roll);
    int maxlenof_l_ankle_roll() const;
    float r_shoulder_pitch();
    void set_r_shoulder_pitch(const float new_r_shoulder_pitch);
    int maxlenof_r_shoulder_pitch() const;
    float r_shoulder_roll();
    void set_r_shoulder_roll(const float new_r_shoulder_roll);
    int maxlenof_r_shoulder_roll() const;
    float r_elbow_yaw();
    void set_r_elbow_yaw(const float new_r_elbow_yaw);
    int maxlenof_r_elbow_yaw() const;
    float r_elbow_roll();
    void set_r_elbow_roll(const float new_r_elbow_roll);
    int maxlenof_r_elbow_roll() const;
    float r_wrist_yaw();
    void set_r_wrist_yaw(const float new_r_wrist_yaw);
    int maxlenof_r_wrist_yaw() const;
    float r_hand();
    void set_r_hand(const float new_r_hand);
    int maxlenof_r_hand() const;
    float r_hip_yaw_pitch();
    void set_r_hip_yaw_pitch(const float new_r_hip_yaw_pitch);
    int maxlenof_r_hip_yaw_pitch() const;
    float r_hip_roll();
    void set_r_hip_roll(const float new_r_hip_roll);
    int maxlenof_r_hip_roll() const;
    float r_hip_pitch();
    void set_r_hip_pitch(const float new_r_hip_pitch);
    int maxlenof_r_hip_pitch() const;
    float r_knee_pitch();
    void set_r_knee_pitch(const float new_r_knee_pitch);
    int maxlenof_r_knee_pitch() const;
    float r_ankle_pitch();
    void set_r_ankle_pitch(const float new_r_ankle_pitch);
    int maxlenof_r_ankle_pitch() const;
    float r_ankle_roll();
    void set_r_ankle_roll(const float new_r_ankle_roll);
    int maxlenof_r_ankle_roll() const;
  };

  RobotType robot_type();
  void set_robot_type(const RobotType new_robot_type);
  int maxlenof_robot_type() const;
  unsigned char robot_version(int index);
  void set_robot_version(unsigned int index, const unsigned char new_robot_version);
  int maxlenof_robot_version() const;
  float head_yaw();
  void set_head_yaw(const float new_head_yaw);
  int maxlenof_head_yaw() const;
  float head_pitch();
  void set_head_pitch(const float new_head_pitch);
  int maxlenof_head_pitch() const;
  float l_shoulder_pitch();
  void set_l_shoulder_pitch(const float new_l_shoulder_pitch);
  int maxlenof_l_shoulder_pitch() const;
  float l_shoulder_roll();
  void set_l_shoulder_roll(const float new_l_shoulder_roll);
  int maxlenof_l_shoulder_roll() const;
  float l_elbow_yaw();
  void set_l_elbow_yaw(const float new_l_elbow_yaw);
  int maxlenof_l_elbow_yaw() const;
  float l_elbow_roll();
  void set_l_elbow_roll(const float new_l_elbow_roll);
  int maxlenof_l_elbow_roll() const;
  float l_wrist_yaw();
  void set_l_wrist_yaw(const float new_l_wrist_yaw);
  int maxlenof_l_wrist_yaw() const;
  float l_hand();
  void set_l_hand(const float new_l_hand);
  int maxlenof_l_hand() const;
  float l_hip_yaw_pitch();
  void set_l_hip_yaw_pitch(const float new_l_hip_yaw_pitch);
  int maxlenof_l_hip_yaw_pitch() const;
  float l_hip_roll();
  void set_l_hip_roll(const float new_l_hip_roll);
  int maxlenof_l_hip_roll() const;
  float l_hip_pitch();
  void set_l_hip_pitch(const float new_l_hip_pitch);
  int maxlenof_l_hip_pitch() const;
  float l_knee_pitch();
  void set_l_knee_pitch(const float new_l_knee_pitch);
  int maxlenof_l_knee_pitch() const;
  float l_ankle_pitch();
  void set_l_ankle_pitch(const float new_l_ankle_pitch);
  int maxlenof_l_ankle_pitch() const;
  float l_ankle_roll();
  void set_l_ankle_roll(const float new_l_ankle_roll);
  int maxlenof_l_ankle_roll() const;
  float r_shoulder_pitch();
  void set_r_shoulder_pitch(const float new_r_shoulder_pitch);
  int maxlenof_r_shoulder_pitch() const;
  float r_shoulder_roll();
  void set_r_shoulder_roll(const float new_r_shoulder_roll);
  int maxlenof_r_shoulder_roll() const;
  float r_elbow_yaw();
  void set_r_elbow_yaw(const float new_r_elbow_yaw);
  int maxlenof_r_elbow_yaw() const;
  float r_elbow_roll();
  void set_r_elbow_roll(const float new_r_elbow_roll);
  int maxlenof_r_elbow_roll() const;
  float r_wrist_yaw();
  void set_r_wrist_yaw(const float new_r_wrist_yaw);
  int maxlenof_r_wrist_yaw() const;
  float r_hand();
  void set_r_hand(const float new_r_hand);
  int maxlenof_r_hand() const;
  float r_hip_yaw_pitch();
  void set_r_hip_yaw_pitch(const float new_r_hip_yaw_pitch);
  int maxlenof_r_hip_yaw_pitch() const;
  float r_hip_roll();
  void set_r_hip_roll(const float new_r_hip_roll);
  int maxlenof_r_hip_roll() const;
  float r_hip_pitch();
  void set_r_hip_pitch(const float new_r_hip_pitch);
  int maxlenof_r_hip_pitch() const;
  float r_knee_pitch();
  void set_r_knee_pitch(const float new_r_knee_pitch);
  int maxlenof_r_knee_pitch() const;
  float r_ankle_pitch();
  void set_r_ankle_pitch(const float new_r_ankle_pitch);
  int maxlenof_r_ankle_pitch() const;
  float r_ankle_roll();
  void set_r_ankle_roll(const float new_r_ankle_roll);
  int maxlenof_r_ankle_roll() const;
  int time();
  void set_time(const int new_time);
  int maxlenof_time() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.NaoJointPositionInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.NaoJointPositionInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.NaoJointPositionInterface.create_message = fawkes.Interface.create_message

$]

}
