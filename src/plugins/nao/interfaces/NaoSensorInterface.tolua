$#include <interfaces/NaoSensorInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class NaoSensorInterface : public Interface
{

  typedef enum {
    USD_NONE,
    USD_LEFT_LEFT,
    USD_LEFT_RIGHT,
    USD_RIGHT_RIGHT,
    USD_RIGHT_LEFT,
    USD_BOTH_BOTH
  } UltrasonicDirection;

  class EmitUltrasonicWaveMessage : public Message
  {
    EmitUltrasonicWaveMessage(UltrasonicDirection ini_ultrasonic_direction);
    EmitUltrasonicWaveMessage();
    ~EmitUltrasonicWaveMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    UltrasonicDirection ultrasonic_direction();
    void set_ultrasonic_direction(const UltrasonicDirection new_ultrasonic_direction);
    int maxlenof_ultrasonic_direction() const;
  };

  class StartUltrasonicMessage : public Message
  {
    StartUltrasonicMessage(UltrasonicDirection ini_ultrasonic_direction);
    StartUltrasonicMessage();
    ~StartUltrasonicMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    UltrasonicDirection ultrasonic_direction();
    void set_ultrasonic_direction(const UltrasonicDirection new_ultrasonic_direction);
    int maxlenof_ultrasonic_direction() const;
  };

  class StopUltrasonicMessage : public Message
  {
    StopUltrasonicMessage();
    ~StopUltrasonicMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  float accel_x();
  void set_accel_x(const float new_accel_x);
  int maxlenof_accel_x() const;
  float accel_y();
  void set_accel_y(const float new_accel_y);
  int maxlenof_accel_y() const;
  float accel_z();
  void set_accel_z(const float new_accel_z);
  int maxlenof_accel_z() const;
  float gyro_x();
  void set_gyro_x(const float new_gyro_x);
  int maxlenof_gyro_x() const;
  float gyro_y();
  void set_gyro_y(const float new_gyro_y);
  int maxlenof_gyro_y() const;
  float gyro_ref();
  void set_gyro_ref(const float new_gyro_ref);
  int maxlenof_gyro_ref() const;
  float angle_x();
  void set_angle_x(const float new_angle_x);
  int maxlenof_angle_x() const;
  float angle_y();
  void set_angle_y(const float new_angle_y);
  int maxlenof_angle_y() const;
  float l_fsr_fl();
  void set_l_fsr_fl(const float new_l_fsr_fl);
  int maxlenof_l_fsr_fl() const;
  float l_fsr_fr();
  void set_l_fsr_fr(const float new_l_fsr_fr);
  int maxlenof_l_fsr_fr() const;
  float l_fsr_rl();
  void set_l_fsr_rl(const float new_l_fsr_rl);
  int maxlenof_l_fsr_rl() const;
  float l_fsr_rr();
  void set_l_fsr_rr(const float new_l_fsr_rr);
  int maxlenof_l_fsr_rr() const;
  float r_fsr_fl();
  void set_r_fsr_fl(const float new_r_fsr_fl);
  int maxlenof_r_fsr_fl() const;
  float r_fsr_fr();
  void set_r_fsr_fr(const float new_r_fsr_fr);
  int maxlenof_r_fsr_fr() const;
  float r_fsr_rl();
  void set_r_fsr_rl(const float new_r_fsr_rl);
  int maxlenof_r_fsr_rl() const;
  float r_fsr_rr();
  void set_r_fsr_rr(const float new_r_fsr_rr);
  int maxlenof_r_fsr_rr() const;
  float l_total_weight();
  void set_l_total_weight(const float new_l_total_weight);
  int maxlenof_l_total_weight() const;
  float r_total_weight();
  void set_r_total_weight(const float new_r_total_weight);
  int maxlenof_r_total_weight() const;
  float l_cop_x();
  void set_l_cop_x(const float new_l_cop_x);
  int maxlenof_l_cop_x() const;
  float l_cop_y();
  void set_l_cop_y(const float new_l_cop_y);
  int maxlenof_l_cop_y() const;
  float r_cop_x();
  void set_r_cop_x(const float new_r_cop_x);
  int maxlenof_r_cop_x() const;
  float r_cop_y();
  void set_r_cop_y(const float new_r_cop_y);
  int maxlenof_r_cop_y() const;
  float ultrasonic_distance_left(int index);
  void set_ultrasonic_distance_left(unsigned int index, const float new_ultrasonic_distance_left);
  int maxlenof_ultrasonic_distance_left() const;
  float ultrasonic_distance_right(int index);
  void set_ultrasonic_distance_right(unsigned int index, const float new_ultrasonic_distance_right);
  int maxlenof_ultrasonic_distance_right() const;
  UltrasonicDirection ultrasonic_direction();
  void set_ultrasonic_direction(const UltrasonicDirection new_ultrasonic_direction);
  int maxlenof_ultrasonic_direction() const;
  unsigned char l_foot_bumper_l();
  void set_l_foot_bumper_l(const unsigned char new_l_foot_bumper_l);
  int maxlenof_l_foot_bumper_l() const;
  unsigned char l_foot_bumper_r();
  void set_l_foot_bumper_r(const unsigned char new_l_foot_bumper_r);
  int maxlenof_l_foot_bumper_r() const;
  unsigned char r_foot_bumper_l();
  void set_r_foot_bumper_l(const unsigned char new_r_foot_bumper_l);
  int maxlenof_r_foot_bumper_l() const;
  unsigned char r_foot_bumper_r();
  void set_r_foot_bumper_r(const unsigned char new_r_foot_bumper_r);
  int maxlenof_r_foot_bumper_r() const;
  unsigned char head_touch_front();
  void set_head_touch_front(const unsigned char new_head_touch_front);
  int maxlenof_head_touch_front() const;
  unsigned char head_touch_middle();
  void set_head_touch_middle(const unsigned char new_head_touch_middle);
  int maxlenof_head_touch_middle() const;
  unsigned char head_touch_rear();
  void set_head_touch_rear(const unsigned char new_head_touch_rear);
  int maxlenof_head_touch_rear() const;
  unsigned char chest_button();
  void set_chest_button(const unsigned char new_chest_button);
  int maxlenof_chest_button() const;
  float battery_charge();
  void set_battery_charge(const float new_battery_charge);
  int maxlenof_battery_charge() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.NaoSensorInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.NaoSensorInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.NaoSensorInterface.create_message = fawkes.Interface.create_message

$]

}
