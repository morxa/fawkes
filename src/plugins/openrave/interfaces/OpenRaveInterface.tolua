$#include <interfaces/OpenRaveInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class OpenRaveInterface : public Interface
{

  class StartViewerMessage : public Message
  {
    StartViewerMessage();
    ~StartViewerMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  class AddObjectMessage : public Message
  {
    AddObjectMessage(char * ini_name, char * ini_path);
    AddObjectMessage();
    ~AddObjectMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * name();
    void set_name(const char * new_name);
    int maxlenof_name() const;
    char * path();
    void set_path(const char * new_path);
    int maxlenof_path() const;
  };

  class DeleteObjectMessage : public Message
  {
    DeleteObjectMessage(char * ini_name);
    DeleteObjectMessage();
    ~DeleteObjectMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * name();
    void set_name(const char * new_name);
    int maxlenof_name() const;
  };

  class DeleteAllObjectsMessage : public Message
  {
    DeleteAllObjectsMessage();
    ~DeleteAllObjectsMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  class AttachObjectMessage : public Message
  {
    AttachObjectMessage(char * ini_name, char * ini_manip_name);
    AttachObjectMessage();
    ~AttachObjectMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * name();
    void set_name(const char * new_name);
    int maxlenof_name() const;
    char * manip_name();
    void set_manip_name(const char * new_manip_name);
    int maxlenof_manip_name() const;
  };

  class ReleaseObjectMessage : public Message
  {
    ReleaseObjectMessage(char * ini_name);
    ReleaseObjectMessage();
    ~ReleaseObjectMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * name();
    void set_name(const char * new_name);
    int maxlenof_name() const;
  };

  class ReleaseAllObjectsMessage : public Message
  {
    ReleaseAllObjectsMessage();
    ~ReleaseAllObjectsMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

  };

  class MoveObjectMessage : public Message
  {
    MoveObjectMessage(char * ini_name, float ini_x, float ini_y, float ini_z);
    MoveObjectMessage();
    ~MoveObjectMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * name();
    void set_name(const char * new_name);
    int maxlenof_name() const;
    float x();
    void set_x(const float new_x);
    int maxlenof_x() const;
    float y();
    void set_y(const float new_y);
    int maxlenof_y() const;
    float z();
    void set_z(const float new_z);
    int maxlenof_z() const;
  };

  class RotateObjectQuatMessage : public Message
  {
    RotateObjectQuatMessage(char * ini_name, float ini_x, float ini_y, float ini_z, float ini_w);
    RotateObjectQuatMessage();
    ~RotateObjectQuatMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * name();
    void set_name(const char * new_name);
    int maxlenof_name() const;
    float x();
    void set_x(const float new_x);
    int maxlenof_x() const;
    float y();
    void set_y(const float new_y);
    int maxlenof_y() const;
    float z();
    void set_z(const float new_z);
    int maxlenof_z() const;
    float w();
    void set_w(const float new_w);
    int maxlenof_w() const;
  };

  class RotateObjectMessage : public Message
  {
    RotateObjectMessage(char * ini_name, float ini_x, float ini_y, float ini_z);
    RotateObjectMessage();
    ~RotateObjectMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * name();
    void set_name(const char * new_name);
    int maxlenof_name() const;
    float x();
    void set_x(const float new_x);
    int maxlenof_x() const;
    float y();
    void set_y(const float new_y);
    int maxlenof_y() const;
    float z();
    void set_z(const float new_z);
    int maxlenof_z() const;
  };

  class RenameObjectMessage : public Message
  {
    RenameObjectMessage(char * ini_name, char * ini_newName);
    RenameObjectMessage();
    ~RenameObjectMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    char * name();
    void set_name(const char * new_name);
    int maxlenof_name() const;
    char * newName();
    void set_newName(const char * new_newName);
    int maxlenof_newName() const;
  };

  unsigned int msgid();
  void set_msgid(const unsigned int new_msgid);
  int maxlenof_msgid() const;
  bool is_final();
  void set_final(const bool new_final);
  int maxlenof_final() const;
  unsigned int error_code();
  void set_error_code(const unsigned int new_error_code);
  int maxlenof_error_code() const;
  bool is_success();
  void set_success(const bool new_success);
  int maxlenof_success() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.OpenRaveInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.OpenRaveInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.OpenRaveInterface.create_message = fawkes.Interface.create_message

$]

}
