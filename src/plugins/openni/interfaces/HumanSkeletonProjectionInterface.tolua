$#include <interfaces/HumanSkeletonProjectionInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class HumanSkeletonProjectionInterface : public Interface
{

  float horizontal_fov();
  void set_horizontal_fov(const float new_horizontal_fov);
  int maxlenof_horizontal_fov() const;
  float vertical_fov();
  void set_vertical_fov(const float new_vertical_fov);
  int maxlenof_vertical_fov() const;
  unsigned int res_x();
  void set_res_x(const unsigned int new_res_x);
  int maxlenof_res_x() const;
  unsigned int res_y();
  void set_res_y(const unsigned int new_res_y);
  int maxlenof_res_y() const;
  unsigned short max_depth();
  void set_max_depth(const unsigned short new_max_depth);
  int maxlenof_max_depth() const;
  float proj_com(int index);
  void set_proj_com(unsigned int index, const float new_proj_com);
  int maxlenof_proj_com() const;
  float proj_head(int index);
  void set_proj_head(unsigned int index, const float new_proj_head);
  int maxlenof_proj_head() const;
  float proj_neck(int index);
  void set_proj_neck(unsigned int index, const float new_proj_neck);
  int maxlenof_proj_neck() const;
  float proj_torso(int index);
  void set_proj_torso(unsigned int index, const float new_proj_torso);
  int maxlenof_proj_torso() const;
  float proj_waist(int index);
  void set_proj_waist(unsigned int index, const float new_proj_waist);
  int maxlenof_proj_waist() const;
  float proj_left_collar(int index);
  void set_proj_left_collar(unsigned int index, const float new_proj_left_collar);
  int maxlenof_proj_left_collar() const;
  float proj_left_shoulder(int index);
  void set_proj_left_shoulder(unsigned int index, const float new_proj_left_shoulder);
  int maxlenof_proj_left_shoulder() const;
  float proj_left_elbow(int index);
  void set_proj_left_elbow(unsigned int index, const float new_proj_left_elbow);
  int maxlenof_proj_left_elbow() const;
  float proj_left_wrist(int index);
  void set_proj_left_wrist(unsigned int index, const float new_proj_left_wrist);
  int maxlenof_proj_left_wrist() const;
  float proj_left_hand(int index);
  void set_proj_left_hand(unsigned int index, const float new_proj_left_hand);
  int maxlenof_proj_left_hand() const;
  float proj_left_fingertip(int index);
  void set_proj_left_fingertip(unsigned int index, const float new_proj_left_fingertip);
  int maxlenof_proj_left_fingertip() const;
  float proj_right_collar(int index);
  void set_proj_right_collar(unsigned int index, const float new_proj_right_collar);
  int maxlenof_proj_right_collar() const;
  float proj_right_shoulder(int index);
  void set_proj_right_shoulder(unsigned int index, const float new_proj_right_shoulder);
  int maxlenof_proj_right_shoulder() const;
  float proj_right_elbow(int index);
  void set_proj_right_elbow(unsigned int index, const float new_proj_right_elbow);
  int maxlenof_proj_right_elbow() const;
  float proj_right_wrist(int index);
  void set_proj_right_wrist(unsigned int index, const float new_proj_right_wrist);
  int maxlenof_proj_right_wrist() const;
  float proj_right_hand(int index);
  void set_proj_right_hand(unsigned int index, const float new_proj_right_hand);
  int maxlenof_proj_right_hand() const;
  float proj_right_fingertip(int index);
  void set_proj_right_fingertip(unsigned int index, const float new_proj_right_fingertip);
  int maxlenof_proj_right_fingertip() const;
  float proj_left_hip(int index);
  void set_proj_left_hip(unsigned int index, const float new_proj_left_hip);
  int maxlenof_proj_left_hip() const;
  float proj_left_knee(int index);
  void set_proj_left_knee(unsigned int index, const float new_proj_left_knee);
  int maxlenof_proj_left_knee() const;
  float proj_left_ankle(int index);
  void set_proj_left_ankle(unsigned int index, const float new_proj_left_ankle);
  int maxlenof_proj_left_ankle() const;
  float proj_left_foot(int index);
  void set_proj_left_foot(unsigned int index, const float new_proj_left_foot);
  int maxlenof_proj_left_foot() const;
  float proj_right_hip(int index);
  void set_proj_right_hip(unsigned int index, const float new_proj_right_hip);
  int maxlenof_proj_right_hip() const;
  float proj_right_knee(int index);
  void set_proj_right_knee(unsigned int index, const float new_proj_right_knee);
  int maxlenof_proj_right_knee() const;
  float proj_right_ankle(int index);
  void set_proj_right_ankle(unsigned int index, const float new_proj_right_ankle);
  int maxlenof_proj_right_ankle() const;
  float proj_right_foot(int index);
  void set_proj_right_foot(unsigned int index, const float new_proj_right_foot);
  int maxlenof_proj_right_foot() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.HumanSkeletonProjectionInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.HumanSkeletonProjectionInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.HumanSkeletonProjectionInterface.create_message = fawkes.Interface.create_message

$]

}
