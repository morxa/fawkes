
/***************************************************************************
 *  RobotinoSensorInterface.h - Fawkes BlackBoard Interface - RobotinoSensorInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2012-2016  Tim Niemueller
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_ROBOTINOSENSORINTERFACE_H_
#define __INTERFACES_ROBOTINOSENSORINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class RobotinoSensorInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(RobotinoSensorInterface)
 /// @endcond
 public:
  /* constants */

 private:
#pragma pack(push,4)
  /** Internal data storage, do NOT modify! */
  typedef struct {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    float mot_velocity[3]; /**< Velocities of the wheels. */
    int32_t mot_position[3]; /**< Positions of the wheels. */
    float mot_current[3]; /**< Motor currents. */
    bool bumper; /**< Bumper pressed indicator. */
    float distance[9]; /**< Distance sensor values. */
    bool digital_in[8]; /**< Digital input values. */
    bool digital_out[8]; /**< Digital output values. */
    float analog_in[8]; /**< Analog input values. */
    bool bumper_estop_enabled; /**< 
      True if emergency stop on bumper contact is enabled, false otherwise.
     */
  } RobotinoSensorInterface_data_t;
#pragma pack(pop)

  RobotinoSensorInterface_data_t *data;

 public:
  /* messages */
  class SetBumperEStopEnabledMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      bool enabled; /**< 
      True to enable emergency stop on bumper contact, false to
      disable. This will persist over OpenRobotino stated restarts.
     */
    } SetBumperEStopEnabledMessage_data_t;
#pragma pack(pop)

    SetBumperEStopEnabledMessage_data_t *data;

   public:
    SetBumperEStopEnabledMessage(const bool ini_enabled);
    SetBumperEStopEnabledMessage();
    ~SetBumperEStopEnabledMessage();

    SetBumperEStopEnabledMessage(const SetBumperEStopEnabledMessage *m);
    /* Methods */
    bool is_enabled() const;
    void set_enabled(const bool new_enabled);
    size_t maxlenof_enabled() const;
    virtual Message * clone() const;
  };

  class SetDigitalOutputMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      uint8_t digital_out; /**< 
	    The number of the digital output to set.
     */
      bool enabled; /**< 
      True to enable digital out, false to disable.
     */
    } SetDigitalOutputMessage_data_t;
#pragma pack(pop)

    SetDigitalOutputMessage_data_t *data;

   public:
    SetDigitalOutputMessage(const uint8_t ini_digital_out, const bool ini_enabled);
    SetDigitalOutputMessage();
    ~SetDigitalOutputMessage();

    SetDigitalOutputMessage(const SetDigitalOutputMessage *m);
    /* Methods */
    uint8_t digital_out() const;
    void set_digital_out(const uint8_t new_digital_out);
    size_t maxlenof_digital_out() const;
    bool is_enabled() const;
    void set_enabled(const bool new_enabled);
    size_t maxlenof_enabled() const;
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  RobotinoSensorInterface();
  ~RobotinoSensorInterface();

 public:
  /* Methods */
  float * mot_velocity() const;
  float mot_velocity(unsigned int index) const;
  void set_mot_velocity(unsigned int index, const float new_mot_velocity);
  void set_mot_velocity(const float * new_mot_velocity);
  size_t maxlenof_mot_velocity() const;
  int32_t * mot_position() const;
  int32_t mot_position(unsigned int index) const;
  void set_mot_position(unsigned int index, const int32_t new_mot_position);
  void set_mot_position(const int32_t * new_mot_position);
  size_t maxlenof_mot_position() const;
  float * mot_current() const;
  float mot_current(unsigned int index) const;
  void set_mot_current(unsigned int index, const float new_mot_current);
  void set_mot_current(const float * new_mot_current);
  size_t maxlenof_mot_current() const;
  bool is_bumper() const;
  void set_bumper(const bool new_bumper);
  size_t maxlenof_bumper() const;
  float * distance() const;
  float distance(unsigned int index) const;
  void set_distance(unsigned int index, const float new_distance);
  void set_distance(const float * new_distance);
  size_t maxlenof_distance() const;
  bool * is_digital_in() const;
  bool is_digital_in(unsigned int index) const;
  void set_digital_in(unsigned int index, const bool new_digital_in);
  void set_digital_in(const bool * new_digital_in);
  size_t maxlenof_digital_in() const;
  bool * is_digital_out() const;
  bool is_digital_out(unsigned int index) const;
  void set_digital_out(unsigned int index, const bool new_digital_out);
  void set_digital_out(const bool * new_digital_out);
  size_t maxlenof_digital_out() const;
  float * analog_in() const;
  float analog_in(unsigned int index) const;
  void set_analog_in(unsigned int index, const float new_analog_in);
  void set_analog_in(const float * new_analog_in);
  size_t maxlenof_analog_in() const;
  bool is_bumper_estop_enabled() const;
  void set_bumper_estop_enabled(const bool new_bumper_estop_enabled);
  size_t maxlenof_bumper_estop_enabled() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
