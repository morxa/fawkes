$#include <interfaces/RobotinoSensorInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class RobotinoSensorInterface : public Interface
{

  class SetBumperEStopEnabledMessage : public Message
  {
    SetBumperEStopEnabledMessage(bool ini_enabled);
    SetBumperEStopEnabledMessage();
    ~SetBumperEStopEnabledMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    bool is_enabled();
    void set_enabled(const bool new_enabled);
    int maxlenof_enabled() const;
  };

  class SetDigitalOutputMessage : public Message
  {
    SetDigitalOutputMessage(unsigned char ini_digital_out, bool ini_enabled);
    SetDigitalOutputMessage();
    ~SetDigitalOutputMessage();

    unsigned int      id() const;

    unsigned int      sender_id() const;
    const char *      sender_thread_name() const;
    Interface *       interface() const;
    const char *      type() const;

    const void *      datachunk() const;
    unsigned int      datasize() const;

    void              set_from_chunk(const void *chunk);

    /* from RefCount */
    void              ref();
    void              unref();
    unsigned int      refcount();

    unsigned char digital_out();
    void set_digital_out(const unsigned char new_digital_out);
    int maxlenof_digital_out() const;
    bool is_enabled();
    void set_enabled(const bool new_enabled);
    int maxlenof_enabled() const;
  };

  float mot_velocity(int index);
  void set_mot_velocity(unsigned int index, const float new_mot_velocity);
  int maxlenof_mot_velocity() const;
  int mot_position(int index);
  void set_mot_position(unsigned int index, const int new_mot_position);
  int maxlenof_mot_position() const;
  float mot_current(int index);
  void set_mot_current(unsigned int index, const float new_mot_current);
  int maxlenof_mot_current() const;
  bool is_bumper();
  void set_bumper(const bool new_bumper);
  int maxlenof_bumper() const;
  float distance(int index);
  void set_distance(unsigned int index, const float new_distance);
  int maxlenof_distance() const;
  bool is_digital_in(int index);
  void set_digital_in(unsigned int index, const bool new_digital_in);
  int maxlenof_digital_in() const;
  bool is_digital_out(int index);
  void set_digital_out(unsigned int index, const bool new_digital_out);
  int maxlenof_digital_out() const;
  float analog_in(int index);
  void set_analog_in(unsigned int index, const float new_analog_in);
  int maxlenof_analog_in() const;
  bool is_bumper_estop_enabled();
  void set_bumper_estop_enabled(const bool new_bumper_estop_enabled);
  int maxlenof_bumper_estop_enabled() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.RobotinoSensorInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.RobotinoSensorInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.RobotinoSensorInterface.create_message = fawkes.Interface.create_message

$]

}
